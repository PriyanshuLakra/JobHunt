
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Job
 * 
 */
export type Job = $Result.DefaultSelection<Prisma.$JobPayload>
/**
 * Model Application
 * 
 */
export type Application = $Result.DefaultSelection<Prisma.$ApplicationPayload>
/**
 * Model JobSeekerInfo
 * 
 */
export type JobSeekerInfo = $Result.DefaultSelection<Prisma.$JobSeekerInfoPayload>
/**
 * Model EmployerInfo
 * 
 */
export type EmployerInfo = $Result.DefaultSelection<Prisma.$EmployerInfoPayload>
/**
 * Model JobInfo
 * 
 */
export type JobInfo = $Result.DefaultSelection<Prisma.$JobInfoPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const ROLE: {
  JobSeeker: 'JobSeeker',
  Employer: 'Employer'
};

export type ROLE = (typeof ROLE)[keyof typeof ROLE]


export const JobType: {
  FullTime: 'FullTime',
  PartTime: 'PartTime'
};

export type JobType = (typeof JobType)[keyof typeof JobType]


export const YesNo: {
  Yes: 'Yes',
  No: 'No'
};

export type YesNo = (typeof YesNo)[keyof typeof YesNo]

}

export type ROLE = $Enums.ROLE

export const ROLE: typeof $Enums.ROLE

export type JobType = $Enums.JobType

export const JobType: typeof $Enums.JobType

export type YesNo = $Enums.YesNo

export const YesNo: typeof $Enums.YesNo

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.job`: Exposes CRUD operations for the **Job** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jobs
    * const jobs = await prisma.job.findMany()
    * ```
    */
  get job(): Prisma.JobDelegate<ExtArgs>;

  /**
   * `prisma.application`: Exposes CRUD operations for the **Application** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Applications
    * const applications = await prisma.application.findMany()
    * ```
    */
  get application(): Prisma.ApplicationDelegate<ExtArgs>;

  /**
   * `prisma.jobSeekerInfo`: Exposes CRUD operations for the **JobSeekerInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobSeekerInfos
    * const jobSeekerInfos = await prisma.jobSeekerInfo.findMany()
    * ```
    */
  get jobSeekerInfo(): Prisma.JobSeekerInfoDelegate<ExtArgs>;

  /**
   * `prisma.employerInfo`: Exposes CRUD operations for the **EmployerInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmployerInfos
    * const employerInfos = await prisma.employerInfo.findMany()
    * ```
    */
  get employerInfo(): Prisma.EmployerInfoDelegate<ExtArgs>;

  /**
   * `prisma.jobInfo`: Exposes CRUD operations for the **JobInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobInfos
    * const jobInfos = await prisma.jobInfo.findMany()
    * ```
    */
  get jobInfo(): Prisma.JobInfoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Job: 'Job',
    Application: 'Application',
    JobSeekerInfo: 'JobSeekerInfo',
    EmployerInfo: 'EmployerInfo',
    JobInfo: 'JobInfo'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "job" | "application" | "jobSeekerInfo" | "employerInfo" | "jobInfo"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Job: {
        payload: Prisma.$JobPayload<ExtArgs>
        fields: Prisma.JobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          findFirst: {
            args: Prisma.JobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          findMany: {
            args: Prisma.JobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          create: {
            args: Prisma.JobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          createMany: {
            args: Prisma.JobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          delete: {
            args: Prisma.JobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          update: {
            args: Prisma.JobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          deleteMany: {
            args: Prisma.JobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.JobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          aggregate: {
            args: Prisma.JobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJob>
          }
          groupBy: {
            args: Prisma.JobGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobCountArgs<ExtArgs>
            result: $Utils.Optional<JobCountAggregateOutputType> | number
          }
        }
      }
      Application: {
        payload: Prisma.$ApplicationPayload<ExtArgs>
        fields: Prisma.ApplicationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApplicationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApplicationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          findFirst: {
            args: Prisma.ApplicationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApplicationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          findMany: {
            args: Prisma.ApplicationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>[]
          }
          create: {
            args: Prisma.ApplicationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          createMany: {
            args: Prisma.ApplicationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ApplicationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>[]
          }
          delete: {
            args: Prisma.ApplicationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          update: {
            args: Prisma.ApplicationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          deleteMany: {
            args: Prisma.ApplicationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApplicationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ApplicationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          aggregate: {
            args: Prisma.ApplicationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApplication>
          }
          groupBy: {
            args: Prisma.ApplicationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApplicationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApplicationCountArgs<ExtArgs>
            result: $Utils.Optional<ApplicationCountAggregateOutputType> | number
          }
        }
      }
      JobSeekerInfo: {
        payload: Prisma.$JobSeekerInfoPayload<ExtArgs>
        fields: Prisma.JobSeekerInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobSeekerInfoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobSeekerInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobSeekerInfoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobSeekerInfoPayload>
          }
          findFirst: {
            args: Prisma.JobSeekerInfoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobSeekerInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobSeekerInfoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobSeekerInfoPayload>
          }
          findMany: {
            args: Prisma.JobSeekerInfoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobSeekerInfoPayload>[]
          }
          create: {
            args: Prisma.JobSeekerInfoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobSeekerInfoPayload>
          }
          createMany: {
            args: Prisma.JobSeekerInfoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobSeekerInfoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobSeekerInfoPayload>[]
          }
          delete: {
            args: Prisma.JobSeekerInfoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobSeekerInfoPayload>
          }
          update: {
            args: Prisma.JobSeekerInfoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobSeekerInfoPayload>
          }
          deleteMany: {
            args: Prisma.JobSeekerInfoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobSeekerInfoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.JobSeekerInfoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobSeekerInfoPayload>
          }
          aggregate: {
            args: Prisma.JobSeekerInfoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJobSeekerInfo>
          }
          groupBy: {
            args: Prisma.JobSeekerInfoGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobSeekerInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobSeekerInfoCountArgs<ExtArgs>
            result: $Utils.Optional<JobSeekerInfoCountAggregateOutputType> | number
          }
        }
      }
      EmployerInfo: {
        payload: Prisma.$EmployerInfoPayload<ExtArgs>
        fields: Prisma.EmployerInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployerInfoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployerInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployerInfoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployerInfoPayload>
          }
          findFirst: {
            args: Prisma.EmployerInfoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployerInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployerInfoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployerInfoPayload>
          }
          findMany: {
            args: Prisma.EmployerInfoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployerInfoPayload>[]
          }
          create: {
            args: Prisma.EmployerInfoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployerInfoPayload>
          }
          createMany: {
            args: Prisma.EmployerInfoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmployerInfoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployerInfoPayload>[]
          }
          delete: {
            args: Prisma.EmployerInfoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployerInfoPayload>
          }
          update: {
            args: Prisma.EmployerInfoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployerInfoPayload>
          }
          deleteMany: {
            args: Prisma.EmployerInfoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmployerInfoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmployerInfoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployerInfoPayload>
          }
          aggregate: {
            args: Prisma.EmployerInfoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployerInfo>
          }
          groupBy: {
            args: Prisma.EmployerInfoGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployerInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployerInfoCountArgs<ExtArgs>
            result: $Utils.Optional<EmployerInfoCountAggregateOutputType> | number
          }
        }
      }
      JobInfo: {
        payload: Prisma.$JobInfoPayload<ExtArgs>
        fields: Prisma.JobInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobInfoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobInfoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobInfoPayload>
          }
          findFirst: {
            args: Prisma.JobInfoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobInfoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobInfoPayload>
          }
          findMany: {
            args: Prisma.JobInfoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobInfoPayload>[]
          }
          create: {
            args: Prisma.JobInfoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobInfoPayload>
          }
          createMany: {
            args: Prisma.JobInfoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobInfoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobInfoPayload>[]
          }
          delete: {
            args: Prisma.JobInfoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobInfoPayload>
          }
          update: {
            args: Prisma.JobInfoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobInfoPayload>
          }
          deleteMany: {
            args: Prisma.JobInfoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobInfoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.JobInfoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobInfoPayload>
          }
          aggregate: {
            args: Prisma.JobInfoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJobInfo>
          }
          groupBy: {
            args: Prisma.JobInfoGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobInfoCountArgs<ExtArgs>
            result: $Utils.Optional<JobInfoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    jobs: number
    JobSeekerInfo: number
    EmployerInfo: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobs?: boolean | UserCountOutputTypeCountJobsArgs
    JobSeekerInfo?: boolean | UserCountOutputTypeCountJobSeekerInfoArgs
    EmployerInfo?: boolean | UserCountOutputTypeCountEmployerInfoArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountJobSeekerInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobSeekerInfoWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEmployerInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployerInfoWhereInput
  }


  /**
   * Count Type JobCountOutputType
   */

  export type JobCountOutputType = {
    JobInfo: number
    JobSeekerInfo: number
    EmployerInfo: number
  }

  export type JobCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    JobInfo?: boolean | JobCountOutputTypeCountJobInfoArgs
    JobSeekerInfo?: boolean | JobCountOutputTypeCountJobSeekerInfoArgs
    EmployerInfo?: boolean | JobCountOutputTypeCountEmployerInfoArgs
  }

  // Custom InputTypes
  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCountOutputType
     */
    select?: JobCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountJobInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobInfoWhereInput
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountJobSeekerInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobSeekerInfoWhereInput
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountEmployerInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployerInfoWhereInput
  }


  /**
   * Count Type JobSeekerInfoCountOutputType
   */

  export type JobSeekerInfoCountOutputType = {
    applications: number
  }

  export type JobSeekerInfoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applications?: boolean | JobSeekerInfoCountOutputTypeCountApplicationsArgs
  }

  // Custom InputTypes
  /**
   * JobSeekerInfoCountOutputType without action
   */
  export type JobSeekerInfoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobSeekerInfoCountOutputType
     */
    select?: JobSeekerInfoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JobSeekerInfoCountOutputType without action
   */
  export type JobSeekerInfoCountOutputTypeCountApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
  }


  /**
   * Count Type EmployerInfoCountOutputType
   */

  export type EmployerInfoCountOutputType = {
    applications: number
  }

  export type EmployerInfoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applications?: boolean | EmployerInfoCountOutputTypeCountApplicationsArgs
  }

  // Custom InputTypes
  /**
   * EmployerInfoCountOutputType without action
   */
  export type EmployerInfoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployerInfoCountOutputType
     */
    select?: EmployerInfoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmployerInfoCountOutputType without action
   */
  export type EmployerInfoCountOutputTypeCountApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
  }


  /**
   * Count Type JobInfoCountOutputType
   */

  export type JobInfoCountOutputType = {
    applications: number
  }

  export type JobInfoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applications?: boolean | JobInfoCountOutputTypeCountApplicationsArgs
  }

  // Custom InputTypes
  /**
   * JobInfoCountOutputType without action
   */
  export type JobInfoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobInfoCountOutputType
     */
    select?: JobInfoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JobInfoCountOutputType without action
   */
  export type JobInfoCountOutputTypeCountApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    address: string | null
    password: string | null
    coverletter: string | null
    role: $Enums.ROLE | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    address: string | null
    password: string | null
    coverletter: string | null
    role: $Enums.ROLE | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phone: number
    address: number
    niches: number
    password: number
    resume: number
    coverletter: number
    role: number
    createdAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    address?: true
    password?: true
    coverletter?: true
    role?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    address?: true
    password?: true
    coverletter?: true
    role?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    address?: true
    niches?: true
    password?: true
    resume?: true
    coverletter?: true
    role?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    email: string
    phone: string
    address: string
    niches: JsonValue
    password: string
    resume: JsonValue | null
    coverletter: string | null
    role: $Enums.ROLE
    createdAt: Date | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    niches?: boolean
    password?: boolean
    resume?: boolean
    coverletter?: boolean
    role?: boolean
    createdAt?: boolean
    jobs?: boolean | User$jobsArgs<ExtArgs>
    JobSeekerInfo?: boolean | User$JobSeekerInfoArgs<ExtArgs>
    EmployerInfo?: boolean | User$EmployerInfoArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    niches?: boolean
    password?: boolean
    resume?: boolean
    coverletter?: boolean
    role?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    niches?: boolean
    password?: boolean
    resume?: boolean
    coverletter?: boolean
    role?: boolean
    createdAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobs?: boolean | User$jobsArgs<ExtArgs>
    JobSeekerInfo?: boolean | User$JobSeekerInfoArgs<ExtArgs>
    EmployerInfo?: boolean | User$EmployerInfoArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      jobs: Prisma.$JobPayload<ExtArgs>[]
      JobSeekerInfo: Prisma.$JobSeekerInfoPayload<ExtArgs>[]
      EmployerInfo: Prisma.$EmployerInfoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      phone: string
      address: string
      niches: Prisma.JsonValue
      password: string
      resume: Prisma.JsonValue | null
      coverletter: string | null
      role: $Enums.ROLE
      createdAt: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    jobs<T extends User$jobsArgs<ExtArgs> = {}>(args?: Subset<T, User$jobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findMany"> | Null>
    JobSeekerInfo<T extends User$JobSeekerInfoArgs<ExtArgs> = {}>(args?: Subset<T, User$JobSeekerInfoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobSeekerInfoPayload<ExtArgs>, T, "findMany"> | Null>
    EmployerInfo<T extends User$EmployerInfoArgs<ExtArgs> = {}>(args?: Subset<T, User$EmployerInfoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployerInfoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly address: FieldRef<"User", 'String'>
    readonly niches: FieldRef<"User", 'Json'>
    readonly password: FieldRef<"User", 'String'>
    readonly resume: FieldRef<"User", 'Json'>
    readonly coverletter: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'ROLE'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.jobs
   */
  export type User$jobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    where?: JobWhereInput
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    cursor?: JobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * User.JobSeekerInfo
   */
  export type User$JobSeekerInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobSeekerInfo
     */
    select?: JobSeekerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobSeekerInfoInclude<ExtArgs> | null
    where?: JobSeekerInfoWhereInput
    orderBy?: JobSeekerInfoOrderByWithRelationInput | JobSeekerInfoOrderByWithRelationInput[]
    cursor?: JobSeekerInfoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobSeekerInfoScalarFieldEnum | JobSeekerInfoScalarFieldEnum[]
  }

  /**
   * User.EmployerInfo
   */
  export type User$EmployerInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployerInfo
     */
    select?: EmployerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInfoInclude<ExtArgs> | null
    where?: EmployerInfoWhereInput
    orderBy?: EmployerInfoOrderByWithRelationInput | EmployerInfoOrderByWithRelationInput[]
    cursor?: EmployerInfoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployerInfoScalarFieldEnum | EmployerInfoScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Job
   */

  export type AggregateJob = {
    _count: JobCountAggregateOutputType | null
    _avg: JobAvgAggregateOutputType | null
    _sum: JobSumAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  export type JobAvgAggregateOutputType = {
    id: number | null
    postedById: number | null
  }

  export type JobSumAggregateOutputType = {
    id: number | null
    postedById: number | null
  }

  export type JobMinAggregateOutputType = {
    id: number | null
    title: string | null
    jobType: $Enums.JobType | null
    location: string | null
    companyName: string | null
    introduction: string | null
    responsibilities: string | null
    qualifications: string | null
    offers: string | null
    salary: string | null
    hiringMultipleCandidates: $Enums.YesNo | null
    jobNiche: string | null
    newsLettersSent: boolean | null
    jobPostedOn: Date | null
    postedById: number | null
  }

  export type JobMaxAggregateOutputType = {
    id: number | null
    title: string | null
    jobType: $Enums.JobType | null
    location: string | null
    companyName: string | null
    introduction: string | null
    responsibilities: string | null
    qualifications: string | null
    offers: string | null
    salary: string | null
    hiringMultipleCandidates: $Enums.YesNo | null
    jobNiche: string | null
    newsLettersSent: boolean | null
    jobPostedOn: Date | null
    postedById: number | null
  }

  export type JobCountAggregateOutputType = {
    id: number
    title: number
    jobType: number
    location: number
    companyName: number
    introduction: number
    responsibilities: number
    qualifications: number
    offers: number
    salary: number
    hiringMultipleCandidates: number
    personalWebsite: number
    jobNiche: number
    newsLettersSent: number
    jobPostedOn: number
    postedById: number
    _all: number
  }


  export type JobAvgAggregateInputType = {
    id?: true
    postedById?: true
  }

  export type JobSumAggregateInputType = {
    id?: true
    postedById?: true
  }

  export type JobMinAggregateInputType = {
    id?: true
    title?: true
    jobType?: true
    location?: true
    companyName?: true
    introduction?: true
    responsibilities?: true
    qualifications?: true
    offers?: true
    salary?: true
    hiringMultipleCandidates?: true
    jobNiche?: true
    newsLettersSent?: true
    jobPostedOn?: true
    postedById?: true
  }

  export type JobMaxAggregateInputType = {
    id?: true
    title?: true
    jobType?: true
    location?: true
    companyName?: true
    introduction?: true
    responsibilities?: true
    qualifications?: true
    offers?: true
    salary?: true
    hiringMultipleCandidates?: true
    jobNiche?: true
    newsLettersSent?: true
    jobPostedOn?: true
    postedById?: true
  }

  export type JobCountAggregateInputType = {
    id?: true
    title?: true
    jobType?: true
    location?: true
    companyName?: true
    introduction?: true
    responsibilities?: true
    qualifications?: true
    offers?: true
    salary?: true
    hiringMultipleCandidates?: true
    personalWebsite?: true
    jobNiche?: true
    newsLettersSent?: true
    jobPostedOn?: true
    postedById?: true
    _all?: true
  }

  export type JobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Job to aggregate.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Jobs
    **/
    _count?: true | JobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobMaxAggregateInputType
  }

  export type GetJobAggregateType<T extends JobAggregateArgs> = {
        [P in keyof T & keyof AggregateJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJob[P]>
      : GetScalarType<T[P], AggregateJob[P]>
  }




  export type JobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWhereInput
    orderBy?: JobOrderByWithAggregationInput | JobOrderByWithAggregationInput[]
    by: JobScalarFieldEnum[] | JobScalarFieldEnum
    having?: JobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobCountAggregateInputType | true
    _avg?: JobAvgAggregateInputType
    _sum?: JobSumAggregateInputType
    _min?: JobMinAggregateInputType
    _max?: JobMaxAggregateInputType
  }

  export type JobGroupByOutputType = {
    id: number
    title: string
    jobType: $Enums.JobType
    location: string
    companyName: string
    introduction: string | null
    responsibilities: string
    qualifications: string
    offers: string | null
    salary: string
    hiringMultipleCandidates: $Enums.YesNo
    personalWebsite: JsonValue | null
    jobNiche: string
    newsLettersSent: boolean
    jobPostedOn: Date
    postedById: number
    _count: JobCountAggregateOutputType | null
    _avg: JobAvgAggregateOutputType | null
    _sum: JobSumAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  type GetJobGroupByPayload<T extends JobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobGroupByOutputType[P]>
            : GetScalarType<T[P], JobGroupByOutputType[P]>
        }
      >
    >


  export type JobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    jobType?: boolean
    location?: boolean
    companyName?: boolean
    introduction?: boolean
    responsibilities?: boolean
    qualifications?: boolean
    offers?: boolean
    salary?: boolean
    hiringMultipleCandidates?: boolean
    personalWebsite?: boolean
    jobNiche?: boolean
    newsLettersSent?: boolean
    jobPostedOn?: boolean
    postedById?: boolean
    postedBy?: boolean | UserDefaultArgs<ExtArgs>
    JobInfo?: boolean | Job$JobInfoArgs<ExtArgs>
    JobSeekerInfo?: boolean | Job$JobSeekerInfoArgs<ExtArgs>
    EmployerInfo?: boolean | Job$EmployerInfoArgs<ExtArgs>
    _count?: boolean | JobCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["job"]>

  export type JobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    jobType?: boolean
    location?: boolean
    companyName?: boolean
    introduction?: boolean
    responsibilities?: boolean
    qualifications?: boolean
    offers?: boolean
    salary?: boolean
    hiringMultipleCandidates?: boolean
    personalWebsite?: boolean
    jobNiche?: boolean
    newsLettersSent?: boolean
    jobPostedOn?: boolean
    postedById?: boolean
    postedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["job"]>

  export type JobSelectScalar = {
    id?: boolean
    title?: boolean
    jobType?: boolean
    location?: boolean
    companyName?: boolean
    introduction?: boolean
    responsibilities?: boolean
    qualifications?: boolean
    offers?: boolean
    salary?: boolean
    hiringMultipleCandidates?: boolean
    personalWebsite?: boolean
    jobNiche?: boolean
    newsLettersSent?: boolean
    jobPostedOn?: boolean
    postedById?: boolean
  }

  export type JobInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    postedBy?: boolean | UserDefaultArgs<ExtArgs>
    JobInfo?: boolean | Job$JobInfoArgs<ExtArgs>
    JobSeekerInfo?: boolean | Job$JobSeekerInfoArgs<ExtArgs>
    EmployerInfo?: boolean | Job$EmployerInfoArgs<ExtArgs>
    _count?: boolean | JobCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type JobIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    postedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $JobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Job"
    objects: {
      postedBy: Prisma.$UserPayload<ExtArgs>
      JobInfo: Prisma.$JobInfoPayload<ExtArgs>[]
      JobSeekerInfo: Prisma.$JobSeekerInfoPayload<ExtArgs>[]
      EmployerInfo: Prisma.$EmployerInfoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      jobType: $Enums.JobType
      location: string
      companyName: string
      introduction: string | null
      responsibilities: string
      qualifications: string
      offers: string | null
      salary: string
      hiringMultipleCandidates: $Enums.YesNo
      personalWebsite: Prisma.JsonValue | null
      jobNiche: string
      newsLettersSent: boolean
      jobPostedOn: Date
      postedById: number
    }, ExtArgs["result"]["job"]>
    composites: {}
  }

  type JobGetPayload<S extends boolean | null | undefined | JobDefaultArgs> = $Result.GetResult<Prisma.$JobPayload, S>

  type JobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<JobFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: JobCountAggregateInputType | true
    }

  export interface JobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Job'], meta: { name: 'Job' } }
    /**
     * Find zero or one Job that matches the filter.
     * @param {JobFindUniqueArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobFindUniqueArgs>(args: SelectSubset<T, JobFindUniqueArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Job that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {JobFindUniqueOrThrowArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobFindUniqueOrThrowArgs>(args: SelectSubset<T, JobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Job that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindFirstArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobFindFirstArgs>(args?: SelectSubset<T, JobFindFirstArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Job that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindFirstOrThrowArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobFindFirstOrThrowArgs>(args?: SelectSubset<T, JobFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Jobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jobs
     * const jobs = await prisma.job.findMany()
     * 
     * // Get first 10 Jobs
     * const jobs = await prisma.job.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobWithIdOnly = await prisma.job.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobFindManyArgs>(args?: SelectSubset<T, JobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Job.
     * @param {JobCreateArgs} args - Arguments to create a Job.
     * @example
     * // Create one Job
     * const Job = await prisma.job.create({
     *   data: {
     *     // ... data to create a Job
     *   }
     * })
     * 
     */
    create<T extends JobCreateArgs>(args: SelectSubset<T, JobCreateArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Jobs.
     * @param {JobCreateManyArgs} args - Arguments to create many Jobs.
     * @example
     * // Create many Jobs
     * const job = await prisma.job.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobCreateManyArgs>(args?: SelectSubset<T, JobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Jobs and returns the data saved in the database.
     * @param {JobCreateManyAndReturnArgs} args - Arguments to create many Jobs.
     * @example
     * // Create many Jobs
     * const job = await prisma.job.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Jobs and only return the `id`
     * const jobWithIdOnly = await prisma.job.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobCreateManyAndReturnArgs>(args?: SelectSubset<T, JobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Job.
     * @param {JobDeleteArgs} args - Arguments to delete one Job.
     * @example
     * // Delete one Job
     * const Job = await prisma.job.delete({
     *   where: {
     *     // ... filter to delete one Job
     *   }
     * })
     * 
     */
    delete<T extends JobDeleteArgs>(args: SelectSubset<T, JobDeleteArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Job.
     * @param {JobUpdateArgs} args - Arguments to update one Job.
     * @example
     * // Update one Job
     * const job = await prisma.job.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobUpdateArgs>(args: SelectSubset<T, JobUpdateArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Jobs.
     * @param {JobDeleteManyArgs} args - Arguments to filter Jobs to delete.
     * @example
     * // Delete a few Jobs
     * const { count } = await prisma.job.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobDeleteManyArgs>(args?: SelectSubset<T, JobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jobs
     * const job = await prisma.job.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobUpdateManyArgs>(args: SelectSubset<T, JobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Job.
     * @param {JobUpsertArgs} args - Arguments to update or create a Job.
     * @example
     * // Update or create a Job
     * const job = await prisma.job.upsert({
     *   create: {
     *     // ... data to create a Job
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Job we want to update
     *   }
     * })
     */
    upsert<T extends JobUpsertArgs>(args: SelectSubset<T, JobUpsertArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCountArgs} args - Arguments to filter Jobs to count.
     * @example
     * // Count the number of Jobs
     * const count = await prisma.job.count({
     *   where: {
     *     // ... the filter for the Jobs we want to count
     *   }
     * })
    **/
    count<T extends JobCountArgs>(
      args?: Subset<T, JobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobAggregateArgs>(args: Subset<T, JobAggregateArgs>): Prisma.PrismaPromise<GetJobAggregateType<T>>

    /**
     * Group by Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobGroupByArgs['orderBy'] }
        : { orderBy?: JobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Job model
   */
  readonly fields: JobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Job.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    postedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    JobInfo<T extends Job$JobInfoArgs<ExtArgs> = {}>(args?: Subset<T, Job$JobInfoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobInfoPayload<ExtArgs>, T, "findMany"> | Null>
    JobSeekerInfo<T extends Job$JobSeekerInfoArgs<ExtArgs> = {}>(args?: Subset<T, Job$JobSeekerInfoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobSeekerInfoPayload<ExtArgs>, T, "findMany"> | Null>
    EmployerInfo<T extends Job$EmployerInfoArgs<ExtArgs> = {}>(args?: Subset<T, Job$EmployerInfoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployerInfoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Job model
   */ 
  interface JobFieldRefs {
    readonly id: FieldRef<"Job", 'Int'>
    readonly title: FieldRef<"Job", 'String'>
    readonly jobType: FieldRef<"Job", 'JobType'>
    readonly location: FieldRef<"Job", 'String'>
    readonly companyName: FieldRef<"Job", 'String'>
    readonly introduction: FieldRef<"Job", 'String'>
    readonly responsibilities: FieldRef<"Job", 'String'>
    readonly qualifications: FieldRef<"Job", 'String'>
    readonly offers: FieldRef<"Job", 'String'>
    readonly salary: FieldRef<"Job", 'String'>
    readonly hiringMultipleCandidates: FieldRef<"Job", 'YesNo'>
    readonly personalWebsite: FieldRef<"Job", 'Json'>
    readonly jobNiche: FieldRef<"Job", 'String'>
    readonly newsLettersSent: FieldRef<"Job", 'Boolean'>
    readonly jobPostedOn: FieldRef<"Job", 'DateTime'>
    readonly postedById: FieldRef<"Job", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Job findUnique
   */
  export type JobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job findUniqueOrThrow
   */
  export type JobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job findFirst
   */
  export type JobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobs.
     */
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job findFirstOrThrow
   */
  export type JobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobs.
     */
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job findMany
   */
  export type JobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Jobs to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job create
   */
  export type JobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * The data needed to create a Job.
     */
    data: XOR<JobCreateInput, JobUncheckedCreateInput>
  }

  /**
   * Job createMany
   */
  export type JobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Jobs.
     */
    data: JobCreateManyInput | JobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Job createManyAndReturn
   */
  export type JobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Jobs.
     */
    data: JobCreateManyInput | JobCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Job update
   */
  export type JobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * The data needed to update a Job.
     */
    data: XOR<JobUpdateInput, JobUncheckedUpdateInput>
    /**
     * Choose, which Job to update.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job updateMany
   */
  export type JobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Jobs.
     */
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyInput>
    /**
     * Filter which Jobs to update
     */
    where?: JobWhereInput
  }

  /**
   * Job upsert
   */
  export type JobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * The filter to search for the Job to update in case it exists.
     */
    where: JobWhereUniqueInput
    /**
     * In case the Job found by the `where` argument doesn't exist, create a new Job with this data.
     */
    create: XOR<JobCreateInput, JobUncheckedCreateInput>
    /**
     * In case the Job was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobUpdateInput, JobUncheckedUpdateInput>
  }

  /**
   * Job delete
   */
  export type JobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter which Job to delete.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job deleteMany
   */
  export type JobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jobs to delete
     */
    where?: JobWhereInput
  }

  /**
   * Job.JobInfo
   */
  export type Job$JobInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobInfo
     */
    select?: JobInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInfoInclude<ExtArgs> | null
    where?: JobInfoWhereInput
    orderBy?: JobInfoOrderByWithRelationInput | JobInfoOrderByWithRelationInput[]
    cursor?: JobInfoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobInfoScalarFieldEnum | JobInfoScalarFieldEnum[]
  }

  /**
   * Job.JobSeekerInfo
   */
  export type Job$JobSeekerInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobSeekerInfo
     */
    select?: JobSeekerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobSeekerInfoInclude<ExtArgs> | null
    where?: JobSeekerInfoWhereInput
    orderBy?: JobSeekerInfoOrderByWithRelationInput | JobSeekerInfoOrderByWithRelationInput[]
    cursor?: JobSeekerInfoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobSeekerInfoScalarFieldEnum | JobSeekerInfoScalarFieldEnum[]
  }

  /**
   * Job.EmployerInfo
   */
  export type Job$EmployerInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployerInfo
     */
    select?: EmployerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInfoInclude<ExtArgs> | null
    where?: EmployerInfoWhereInput
    orderBy?: EmployerInfoOrderByWithRelationInput | EmployerInfoOrderByWithRelationInput[]
    cursor?: EmployerInfoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmployerInfoScalarFieldEnum | EmployerInfoScalarFieldEnum[]
  }

  /**
   * Job without action
   */
  export type JobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
  }


  /**
   * Model Application
   */

  export type AggregateApplication = {
    _count: ApplicationCountAggregateOutputType | null
    _avg: ApplicationAvgAggregateOutputType | null
    _sum: ApplicationSumAggregateOutputType | null
    _min: ApplicationMinAggregateOutputType | null
    _max: ApplicationMaxAggregateOutputType | null
  }

  export type ApplicationAvgAggregateOutputType = {
    id: number | null
    jobSeekerInfoId: number | null
    employerInfoId: number | null
    jobInfoId: number | null
  }

  export type ApplicationSumAggregateOutputType = {
    id: number | null
    jobSeekerInfoId: number | null
    employerInfoId: number | null
    jobInfoId: number | null
  }

  export type ApplicationMinAggregateOutputType = {
    id: number | null
    jobSeekerInfoId: number | null
    employerInfoId: number | null
    jobInfoId: number | null
  }

  export type ApplicationMaxAggregateOutputType = {
    id: number | null
    jobSeekerInfoId: number | null
    employerInfoId: number | null
    jobInfoId: number | null
  }

  export type ApplicationCountAggregateOutputType = {
    id: number
    jobSeekerInfoId: number
    employerInfoId: number
    jobInfoId: number
    deletedBy: number
    _all: number
  }


  export type ApplicationAvgAggregateInputType = {
    id?: true
    jobSeekerInfoId?: true
    employerInfoId?: true
    jobInfoId?: true
  }

  export type ApplicationSumAggregateInputType = {
    id?: true
    jobSeekerInfoId?: true
    employerInfoId?: true
    jobInfoId?: true
  }

  export type ApplicationMinAggregateInputType = {
    id?: true
    jobSeekerInfoId?: true
    employerInfoId?: true
    jobInfoId?: true
  }

  export type ApplicationMaxAggregateInputType = {
    id?: true
    jobSeekerInfoId?: true
    employerInfoId?: true
    jobInfoId?: true
  }

  export type ApplicationCountAggregateInputType = {
    id?: true
    jobSeekerInfoId?: true
    employerInfoId?: true
    jobInfoId?: true
    deletedBy?: true
    _all?: true
  }

  export type ApplicationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Application to aggregate.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Applications
    **/
    _count?: true | ApplicationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ApplicationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ApplicationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApplicationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApplicationMaxAggregateInputType
  }

  export type GetApplicationAggregateType<T extends ApplicationAggregateArgs> = {
        [P in keyof T & keyof AggregateApplication]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApplication[P]>
      : GetScalarType<T[P], AggregateApplication[P]>
  }




  export type ApplicationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithAggregationInput | ApplicationOrderByWithAggregationInput[]
    by: ApplicationScalarFieldEnum[] | ApplicationScalarFieldEnum
    having?: ApplicationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApplicationCountAggregateInputType | true
    _avg?: ApplicationAvgAggregateInputType
    _sum?: ApplicationSumAggregateInputType
    _min?: ApplicationMinAggregateInputType
    _max?: ApplicationMaxAggregateInputType
  }

  export type ApplicationGroupByOutputType = {
    id: number
    jobSeekerInfoId: number
    employerInfoId: number
    jobInfoId: number
    deletedBy: JsonValue | null
    _count: ApplicationCountAggregateOutputType | null
    _avg: ApplicationAvgAggregateOutputType | null
    _sum: ApplicationSumAggregateOutputType | null
    _min: ApplicationMinAggregateOutputType | null
    _max: ApplicationMaxAggregateOutputType | null
  }

  type GetApplicationGroupByPayload<T extends ApplicationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApplicationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApplicationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApplicationGroupByOutputType[P]>
            : GetScalarType<T[P], ApplicationGroupByOutputType[P]>
        }
      >
    >


  export type ApplicationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobSeekerInfoId?: boolean
    employerInfoId?: boolean
    jobInfoId?: boolean
    deletedBy?: boolean
    jobSeekerInfo?: boolean | JobSeekerInfoDefaultArgs<ExtArgs>
    employerInfo?: boolean | EmployerInfoDefaultArgs<ExtArgs>
    jobInfo?: boolean | JobInfoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["application"]>

  export type ApplicationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobSeekerInfoId?: boolean
    employerInfoId?: boolean
    jobInfoId?: boolean
    deletedBy?: boolean
    jobSeekerInfo?: boolean | JobSeekerInfoDefaultArgs<ExtArgs>
    employerInfo?: boolean | EmployerInfoDefaultArgs<ExtArgs>
    jobInfo?: boolean | JobInfoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["application"]>

  export type ApplicationSelectScalar = {
    id?: boolean
    jobSeekerInfoId?: boolean
    employerInfoId?: boolean
    jobInfoId?: boolean
    deletedBy?: boolean
  }

  export type ApplicationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobSeekerInfo?: boolean | JobSeekerInfoDefaultArgs<ExtArgs>
    employerInfo?: boolean | EmployerInfoDefaultArgs<ExtArgs>
    jobInfo?: boolean | JobInfoDefaultArgs<ExtArgs>
  }
  export type ApplicationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobSeekerInfo?: boolean | JobSeekerInfoDefaultArgs<ExtArgs>
    employerInfo?: boolean | EmployerInfoDefaultArgs<ExtArgs>
    jobInfo?: boolean | JobInfoDefaultArgs<ExtArgs>
  }

  export type $ApplicationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Application"
    objects: {
      jobSeekerInfo: Prisma.$JobSeekerInfoPayload<ExtArgs>
      employerInfo: Prisma.$EmployerInfoPayload<ExtArgs>
      jobInfo: Prisma.$JobInfoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      jobSeekerInfoId: number
      employerInfoId: number
      jobInfoId: number
      deletedBy: Prisma.JsonValue | null
    }, ExtArgs["result"]["application"]>
    composites: {}
  }

  type ApplicationGetPayload<S extends boolean | null | undefined | ApplicationDefaultArgs> = $Result.GetResult<Prisma.$ApplicationPayload, S>

  type ApplicationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ApplicationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ApplicationCountAggregateInputType | true
    }

  export interface ApplicationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Application'], meta: { name: 'Application' } }
    /**
     * Find zero or one Application that matches the filter.
     * @param {ApplicationFindUniqueArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApplicationFindUniqueArgs>(args: SelectSubset<T, ApplicationFindUniqueArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Application that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ApplicationFindUniqueOrThrowArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApplicationFindUniqueOrThrowArgs>(args: SelectSubset<T, ApplicationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Application that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindFirstArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApplicationFindFirstArgs>(args?: SelectSubset<T, ApplicationFindFirstArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Application that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindFirstOrThrowArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApplicationFindFirstOrThrowArgs>(args?: SelectSubset<T, ApplicationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Applications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Applications
     * const applications = await prisma.application.findMany()
     * 
     * // Get first 10 Applications
     * const applications = await prisma.application.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const applicationWithIdOnly = await prisma.application.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApplicationFindManyArgs>(args?: SelectSubset<T, ApplicationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Application.
     * @param {ApplicationCreateArgs} args - Arguments to create a Application.
     * @example
     * // Create one Application
     * const Application = await prisma.application.create({
     *   data: {
     *     // ... data to create a Application
     *   }
     * })
     * 
     */
    create<T extends ApplicationCreateArgs>(args: SelectSubset<T, ApplicationCreateArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Applications.
     * @param {ApplicationCreateManyArgs} args - Arguments to create many Applications.
     * @example
     * // Create many Applications
     * const application = await prisma.application.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApplicationCreateManyArgs>(args?: SelectSubset<T, ApplicationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Applications and returns the data saved in the database.
     * @param {ApplicationCreateManyAndReturnArgs} args - Arguments to create many Applications.
     * @example
     * // Create many Applications
     * const application = await prisma.application.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Applications and only return the `id`
     * const applicationWithIdOnly = await prisma.application.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ApplicationCreateManyAndReturnArgs>(args?: SelectSubset<T, ApplicationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Application.
     * @param {ApplicationDeleteArgs} args - Arguments to delete one Application.
     * @example
     * // Delete one Application
     * const Application = await prisma.application.delete({
     *   where: {
     *     // ... filter to delete one Application
     *   }
     * })
     * 
     */
    delete<T extends ApplicationDeleteArgs>(args: SelectSubset<T, ApplicationDeleteArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Application.
     * @param {ApplicationUpdateArgs} args - Arguments to update one Application.
     * @example
     * // Update one Application
     * const application = await prisma.application.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApplicationUpdateArgs>(args: SelectSubset<T, ApplicationUpdateArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Applications.
     * @param {ApplicationDeleteManyArgs} args - Arguments to filter Applications to delete.
     * @example
     * // Delete a few Applications
     * const { count } = await prisma.application.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApplicationDeleteManyArgs>(args?: SelectSubset<T, ApplicationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Applications
     * const application = await prisma.application.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApplicationUpdateManyArgs>(args: SelectSubset<T, ApplicationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Application.
     * @param {ApplicationUpsertArgs} args - Arguments to update or create a Application.
     * @example
     * // Update or create a Application
     * const application = await prisma.application.upsert({
     *   create: {
     *     // ... data to create a Application
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Application we want to update
     *   }
     * })
     */
    upsert<T extends ApplicationUpsertArgs>(args: SelectSubset<T, ApplicationUpsertArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationCountArgs} args - Arguments to filter Applications to count.
     * @example
     * // Count the number of Applications
     * const count = await prisma.application.count({
     *   where: {
     *     // ... the filter for the Applications we want to count
     *   }
     * })
    **/
    count<T extends ApplicationCountArgs>(
      args?: Subset<T, ApplicationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApplicationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Application.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApplicationAggregateArgs>(args: Subset<T, ApplicationAggregateArgs>): Prisma.PrismaPromise<GetApplicationAggregateType<T>>

    /**
     * Group by Application.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApplicationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApplicationGroupByArgs['orderBy'] }
        : { orderBy?: ApplicationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApplicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApplicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Application model
   */
  readonly fields: ApplicationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Application.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApplicationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    jobSeekerInfo<T extends JobSeekerInfoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobSeekerInfoDefaultArgs<ExtArgs>>): Prisma__JobSeekerInfoClient<$Result.GetResult<Prisma.$JobSeekerInfoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    employerInfo<T extends EmployerInfoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployerInfoDefaultArgs<ExtArgs>>): Prisma__EmployerInfoClient<$Result.GetResult<Prisma.$EmployerInfoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    jobInfo<T extends JobInfoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobInfoDefaultArgs<ExtArgs>>): Prisma__JobInfoClient<$Result.GetResult<Prisma.$JobInfoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Application model
   */ 
  interface ApplicationFieldRefs {
    readonly id: FieldRef<"Application", 'Int'>
    readonly jobSeekerInfoId: FieldRef<"Application", 'Int'>
    readonly employerInfoId: FieldRef<"Application", 'Int'>
    readonly jobInfoId: FieldRef<"Application", 'Int'>
    readonly deletedBy: FieldRef<"Application", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Application findUnique
   */
  export type ApplicationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application findUniqueOrThrow
   */
  export type ApplicationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application findFirst
   */
  export type ApplicationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applications.
     */
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * Application findFirstOrThrow
   */
  export type ApplicationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applications.
     */
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * Application findMany
   */
  export type ApplicationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Applications to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * Application create
   */
  export type ApplicationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The data needed to create a Application.
     */
    data: XOR<ApplicationCreateInput, ApplicationUncheckedCreateInput>
  }

  /**
   * Application createMany
   */
  export type ApplicationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Applications.
     */
    data: ApplicationCreateManyInput | ApplicationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Application createManyAndReturn
   */
  export type ApplicationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Applications.
     */
    data: ApplicationCreateManyInput | ApplicationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Application update
   */
  export type ApplicationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The data needed to update a Application.
     */
    data: XOR<ApplicationUpdateInput, ApplicationUncheckedUpdateInput>
    /**
     * Choose, which Application to update.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application updateMany
   */
  export type ApplicationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Applications.
     */
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyInput>
    /**
     * Filter which Applications to update
     */
    where?: ApplicationWhereInput
  }

  /**
   * Application upsert
   */
  export type ApplicationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The filter to search for the Application to update in case it exists.
     */
    where: ApplicationWhereUniqueInput
    /**
     * In case the Application found by the `where` argument doesn't exist, create a new Application with this data.
     */
    create: XOR<ApplicationCreateInput, ApplicationUncheckedCreateInput>
    /**
     * In case the Application was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApplicationUpdateInput, ApplicationUncheckedUpdateInput>
  }

  /**
   * Application delete
   */
  export type ApplicationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter which Application to delete.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application deleteMany
   */
  export type ApplicationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Applications to delete
     */
    where?: ApplicationWhereInput
  }

  /**
   * Application without action
   */
  export type ApplicationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
  }


  /**
   * Model JobSeekerInfo
   */

  export type AggregateJobSeekerInfo = {
    _count: JobSeekerInfoCountAggregateOutputType | null
    _avg: JobSeekerInfoAvgAggregateOutputType | null
    _sum: JobSeekerInfoSumAggregateOutputType | null
    _min: JobSeekerInfoMinAggregateOutputType | null
    _max: JobSeekerInfoMaxAggregateOutputType | null
  }

  export type JobSeekerInfoAvgAggregateOutputType = {
    id: number | null
    JobSeekeruserId: number | null
    forWhichJobId: number | null
  }

  export type JobSeekerInfoSumAggregateOutputType = {
    id: number | null
    JobSeekeruserId: number | null
    forWhichJobId: number | null
  }

  export type JobSeekerInfoMinAggregateOutputType = {
    id: number | null
    JobSeekeruserId: number | null
    forWhichJobId: number | null
    name: string | null
    email: string | null
    phone: string | null
    address: string | null
    coverletter: string | null
    role: string | null
  }

  export type JobSeekerInfoMaxAggregateOutputType = {
    id: number | null
    JobSeekeruserId: number | null
    forWhichJobId: number | null
    name: string | null
    email: string | null
    phone: string | null
    address: string | null
    coverletter: string | null
    role: string | null
  }

  export type JobSeekerInfoCountAggregateOutputType = {
    id: number
    JobSeekeruserId: number
    forWhichJobId: number
    name: number
    email: number
    phone: number
    address: number
    coverletter: number
    role: number
    resume: number
    _all: number
  }


  export type JobSeekerInfoAvgAggregateInputType = {
    id?: true
    JobSeekeruserId?: true
    forWhichJobId?: true
  }

  export type JobSeekerInfoSumAggregateInputType = {
    id?: true
    JobSeekeruserId?: true
    forWhichJobId?: true
  }

  export type JobSeekerInfoMinAggregateInputType = {
    id?: true
    JobSeekeruserId?: true
    forWhichJobId?: true
    name?: true
    email?: true
    phone?: true
    address?: true
    coverletter?: true
    role?: true
  }

  export type JobSeekerInfoMaxAggregateInputType = {
    id?: true
    JobSeekeruserId?: true
    forWhichJobId?: true
    name?: true
    email?: true
    phone?: true
    address?: true
    coverletter?: true
    role?: true
  }

  export type JobSeekerInfoCountAggregateInputType = {
    id?: true
    JobSeekeruserId?: true
    forWhichJobId?: true
    name?: true
    email?: true
    phone?: true
    address?: true
    coverletter?: true
    role?: true
    resume?: true
    _all?: true
  }

  export type JobSeekerInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobSeekerInfo to aggregate.
     */
    where?: JobSeekerInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobSeekerInfos to fetch.
     */
    orderBy?: JobSeekerInfoOrderByWithRelationInput | JobSeekerInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobSeekerInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobSeekerInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobSeekerInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobSeekerInfos
    **/
    _count?: true | JobSeekerInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobSeekerInfoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobSeekerInfoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobSeekerInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobSeekerInfoMaxAggregateInputType
  }

  export type GetJobSeekerInfoAggregateType<T extends JobSeekerInfoAggregateArgs> = {
        [P in keyof T & keyof AggregateJobSeekerInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobSeekerInfo[P]>
      : GetScalarType<T[P], AggregateJobSeekerInfo[P]>
  }




  export type JobSeekerInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobSeekerInfoWhereInput
    orderBy?: JobSeekerInfoOrderByWithAggregationInput | JobSeekerInfoOrderByWithAggregationInput[]
    by: JobSeekerInfoScalarFieldEnum[] | JobSeekerInfoScalarFieldEnum
    having?: JobSeekerInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobSeekerInfoCountAggregateInputType | true
    _avg?: JobSeekerInfoAvgAggregateInputType
    _sum?: JobSeekerInfoSumAggregateInputType
    _min?: JobSeekerInfoMinAggregateInputType
    _max?: JobSeekerInfoMaxAggregateInputType
  }

  export type JobSeekerInfoGroupByOutputType = {
    id: number
    JobSeekeruserId: number
    forWhichJobId: number
    name: string
    email: string
    phone: string
    address: string
    coverletter: string
    role: string
    resume: JsonValue | null
    _count: JobSeekerInfoCountAggregateOutputType | null
    _avg: JobSeekerInfoAvgAggregateOutputType | null
    _sum: JobSeekerInfoSumAggregateOutputType | null
    _min: JobSeekerInfoMinAggregateOutputType | null
    _max: JobSeekerInfoMaxAggregateOutputType | null
  }

  type GetJobSeekerInfoGroupByPayload<T extends JobSeekerInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobSeekerInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobSeekerInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobSeekerInfoGroupByOutputType[P]>
            : GetScalarType<T[P], JobSeekerInfoGroupByOutputType[P]>
        }
      >
    >


  export type JobSeekerInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    JobSeekeruserId?: boolean
    forWhichJobId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    coverletter?: boolean
    role?: boolean
    resume?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    forWhichJob?: boolean | JobDefaultArgs<ExtArgs>
    applications?: boolean | JobSeekerInfo$applicationsArgs<ExtArgs>
    _count?: boolean | JobSeekerInfoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobSeekerInfo"]>

  export type JobSeekerInfoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    JobSeekeruserId?: boolean
    forWhichJobId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    coverletter?: boolean
    role?: boolean
    resume?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    forWhichJob?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobSeekerInfo"]>

  export type JobSeekerInfoSelectScalar = {
    id?: boolean
    JobSeekeruserId?: boolean
    forWhichJobId?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    coverletter?: boolean
    role?: boolean
    resume?: boolean
  }

  export type JobSeekerInfoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    forWhichJob?: boolean | JobDefaultArgs<ExtArgs>
    applications?: boolean | JobSeekerInfo$applicationsArgs<ExtArgs>
    _count?: boolean | JobSeekerInfoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type JobSeekerInfoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    forWhichJob?: boolean | JobDefaultArgs<ExtArgs>
  }

  export type $JobSeekerInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JobSeekerInfo"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      forWhichJob: Prisma.$JobPayload<ExtArgs>
      applications: Prisma.$ApplicationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      JobSeekeruserId: number
      forWhichJobId: number
      name: string
      email: string
      phone: string
      address: string
      coverletter: string
      role: string
      resume: Prisma.JsonValue | null
    }, ExtArgs["result"]["jobSeekerInfo"]>
    composites: {}
  }

  type JobSeekerInfoGetPayload<S extends boolean | null | undefined | JobSeekerInfoDefaultArgs> = $Result.GetResult<Prisma.$JobSeekerInfoPayload, S>

  type JobSeekerInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<JobSeekerInfoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: JobSeekerInfoCountAggregateInputType | true
    }

  export interface JobSeekerInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JobSeekerInfo'], meta: { name: 'JobSeekerInfo' } }
    /**
     * Find zero or one JobSeekerInfo that matches the filter.
     * @param {JobSeekerInfoFindUniqueArgs} args - Arguments to find a JobSeekerInfo
     * @example
     * // Get one JobSeekerInfo
     * const jobSeekerInfo = await prisma.jobSeekerInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobSeekerInfoFindUniqueArgs>(args: SelectSubset<T, JobSeekerInfoFindUniqueArgs<ExtArgs>>): Prisma__JobSeekerInfoClient<$Result.GetResult<Prisma.$JobSeekerInfoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one JobSeekerInfo that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {JobSeekerInfoFindUniqueOrThrowArgs} args - Arguments to find a JobSeekerInfo
     * @example
     * // Get one JobSeekerInfo
     * const jobSeekerInfo = await prisma.jobSeekerInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobSeekerInfoFindUniqueOrThrowArgs>(args: SelectSubset<T, JobSeekerInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobSeekerInfoClient<$Result.GetResult<Prisma.$JobSeekerInfoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first JobSeekerInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobSeekerInfoFindFirstArgs} args - Arguments to find a JobSeekerInfo
     * @example
     * // Get one JobSeekerInfo
     * const jobSeekerInfo = await prisma.jobSeekerInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobSeekerInfoFindFirstArgs>(args?: SelectSubset<T, JobSeekerInfoFindFirstArgs<ExtArgs>>): Prisma__JobSeekerInfoClient<$Result.GetResult<Prisma.$JobSeekerInfoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first JobSeekerInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobSeekerInfoFindFirstOrThrowArgs} args - Arguments to find a JobSeekerInfo
     * @example
     * // Get one JobSeekerInfo
     * const jobSeekerInfo = await prisma.jobSeekerInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobSeekerInfoFindFirstOrThrowArgs>(args?: SelectSubset<T, JobSeekerInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobSeekerInfoClient<$Result.GetResult<Prisma.$JobSeekerInfoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more JobSeekerInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobSeekerInfoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobSeekerInfos
     * const jobSeekerInfos = await prisma.jobSeekerInfo.findMany()
     * 
     * // Get first 10 JobSeekerInfos
     * const jobSeekerInfos = await prisma.jobSeekerInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobSeekerInfoWithIdOnly = await prisma.jobSeekerInfo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobSeekerInfoFindManyArgs>(args?: SelectSubset<T, JobSeekerInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobSeekerInfoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a JobSeekerInfo.
     * @param {JobSeekerInfoCreateArgs} args - Arguments to create a JobSeekerInfo.
     * @example
     * // Create one JobSeekerInfo
     * const JobSeekerInfo = await prisma.jobSeekerInfo.create({
     *   data: {
     *     // ... data to create a JobSeekerInfo
     *   }
     * })
     * 
     */
    create<T extends JobSeekerInfoCreateArgs>(args: SelectSubset<T, JobSeekerInfoCreateArgs<ExtArgs>>): Prisma__JobSeekerInfoClient<$Result.GetResult<Prisma.$JobSeekerInfoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many JobSeekerInfos.
     * @param {JobSeekerInfoCreateManyArgs} args - Arguments to create many JobSeekerInfos.
     * @example
     * // Create many JobSeekerInfos
     * const jobSeekerInfo = await prisma.jobSeekerInfo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobSeekerInfoCreateManyArgs>(args?: SelectSubset<T, JobSeekerInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JobSeekerInfos and returns the data saved in the database.
     * @param {JobSeekerInfoCreateManyAndReturnArgs} args - Arguments to create many JobSeekerInfos.
     * @example
     * // Create many JobSeekerInfos
     * const jobSeekerInfo = await prisma.jobSeekerInfo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JobSeekerInfos and only return the `id`
     * const jobSeekerInfoWithIdOnly = await prisma.jobSeekerInfo.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobSeekerInfoCreateManyAndReturnArgs>(args?: SelectSubset<T, JobSeekerInfoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobSeekerInfoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a JobSeekerInfo.
     * @param {JobSeekerInfoDeleteArgs} args - Arguments to delete one JobSeekerInfo.
     * @example
     * // Delete one JobSeekerInfo
     * const JobSeekerInfo = await prisma.jobSeekerInfo.delete({
     *   where: {
     *     // ... filter to delete one JobSeekerInfo
     *   }
     * })
     * 
     */
    delete<T extends JobSeekerInfoDeleteArgs>(args: SelectSubset<T, JobSeekerInfoDeleteArgs<ExtArgs>>): Prisma__JobSeekerInfoClient<$Result.GetResult<Prisma.$JobSeekerInfoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one JobSeekerInfo.
     * @param {JobSeekerInfoUpdateArgs} args - Arguments to update one JobSeekerInfo.
     * @example
     * // Update one JobSeekerInfo
     * const jobSeekerInfo = await prisma.jobSeekerInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobSeekerInfoUpdateArgs>(args: SelectSubset<T, JobSeekerInfoUpdateArgs<ExtArgs>>): Prisma__JobSeekerInfoClient<$Result.GetResult<Prisma.$JobSeekerInfoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more JobSeekerInfos.
     * @param {JobSeekerInfoDeleteManyArgs} args - Arguments to filter JobSeekerInfos to delete.
     * @example
     * // Delete a few JobSeekerInfos
     * const { count } = await prisma.jobSeekerInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobSeekerInfoDeleteManyArgs>(args?: SelectSubset<T, JobSeekerInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobSeekerInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobSeekerInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobSeekerInfos
     * const jobSeekerInfo = await prisma.jobSeekerInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobSeekerInfoUpdateManyArgs>(args: SelectSubset<T, JobSeekerInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one JobSeekerInfo.
     * @param {JobSeekerInfoUpsertArgs} args - Arguments to update or create a JobSeekerInfo.
     * @example
     * // Update or create a JobSeekerInfo
     * const jobSeekerInfo = await prisma.jobSeekerInfo.upsert({
     *   create: {
     *     // ... data to create a JobSeekerInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobSeekerInfo we want to update
     *   }
     * })
     */
    upsert<T extends JobSeekerInfoUpsertArgs>(args: SelectSubset<T, JobSeekerInfoUpsertArgs<ExtArgs>>): Prisma__JobSeekerInfoClient<$Result.GetResult<Prisma.$JobSeekerInfoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of JobSeekerInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobSeekerInfoCountArgs} args - Arguments to filter JobSeekerInfos to count.
     * @example
     * // Count the number of JobSeekerInfos
     * const count = await prisma.jobSeekerInfo.count({
     *   where: {
     *     // ... the filter for the JobSeekerInfos we want to count
     *   }
     * })
    **/
    count<T extends JobSeekerInfoCountArgs>(
      args?: Subset<T, JobSeekerInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobSeekerInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobSeekerInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobSeekerInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobSeekerInfoAggregateArgs>(args: Subset<T, JobSeekerInfoAggregateArgs>): Prisma.PrismaPromise<GetJobSeekerInfoAggregateType<T>>

    /**
     * Group by JobSeekerInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobSeekerInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobSeekerInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobSeekerInfoGroupByArgs['orderBy'] }
        : { orderBy?: JobSeekerInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobSeekerInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobSeekerInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobSeekerInfo model
   */
  readonly fields: JobSeekerInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JobSeekerInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobSeekerInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    forWhichJob<T extends JobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobDefaultArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    applications<T extends JobSeekerInfo$applicationsArgs<ExtArgs> = {}>(args?: Subset<T, JobSeekerInfo$applicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JobSeekerInfo model
   */ 
  interface JobSeekerInfoFieldRefs {
    readonly id: FieldRef<"JobSeekerInfo", 'Int'>
    readonly JobSeekeruserId: FieldRef<"JobSeekerInfo", 'Int'>
    readonly forWhichJobId: FieldRef<"JobSeekerInfo", 'Int'>
    readonly name: FieldRef<"JobSeekerInfo", 'String'>
    readonly email: FieldRef<"JobSeekerInfo", 'String'>
    readonly phone: FieldRef<"JobSeekerInfo", 'String'>
    readonly address: FieldRef<"JobSeekerInfo", 'String'>
    readonly coverletter: FieldRef<"JobSeekerInfo", 'String'>
    readonly role: FieldRef<"JobSeekerInfo", 'String'>
    readonly resume: FieldRef<"JobSeekerInfo", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * JobSeekerInfo findUnique
   */
  export type JobSeekerInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobSeekerInfo
     */
    select?: JobSeekerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobSeekerInfoInclude<ExtArgs> | null
    /**
     * Filter, which JobSeekerInfo to fetch.
     */
    where: JobSeekerInfoWhereUniqueInput
  }

  /**
   * JobSeekerInfo findUniqueOrThrow
   */
  export type JobSeekerInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobSeekerInfo
     */
    select?: JobSeekerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobSeekerInfoInclude<ExtArgs> | null
    /**
     * Filter, which JobSeekerInfo to fetch.
     */
    where: JobSeekerInfoWhereUniqueInput
  }

  /**
   * JobSeekerInfo findFirst
   */
  export type JobSeekerInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobSeekerInfo
     */
    select?: JobSeekerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobSeekerInfoInclude<ExtArgs> | null
    /**
     * Filter, which JobSeekerInfo to fetch.
     */
    where?: JobSeekerInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobSeekerInfos to fetch.
     */
    orderBy?: JobSeekerInfoOrderByWithRelationInput | JobSeekerInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobSeekerInfos.
     */
    cursor?: JobSeekerInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobSeekerInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobSeekerInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobSeekerInfos.
     */
    distinct?: JobSeekerInfoScalarFieldEnum | JobSeekerInfoScalarFieldEnum[]
  }

  /**
   * JobSeekerInfo findFirstOrThrow
   */
  export type JobSeekerInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobSeekerInfo
     */
    select?: JobSeekerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobSeekerInfoInclude<ExtArgs> | null
    /**
     * Filter, which JobSeekerInfo to fetch.
     */
    where?: JobSeekerInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobSeekerInfos to fetch.
     */
    orderBy?: JobSeekerInfoOrderByWithRelationInput | JobSeekerInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobSeekerInfos.
     */
    cursor?: JobSeekerInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobSeekerInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobSeekerInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobSeekerInfos.
     */
    distinct?: JobSeekerInfoScalarFieldEnum | JobSeekerInfoScalarFieldEnum[]
  }

  /**
   * JobSeekerInfo findMany
   */
  export type JobSeekerInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobSeekerInfo
     */
    select?: JobSeekerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobSeekerInfoInclude<ExtArgs> | null
    /**
     * Filter, which JobSeekerInfos to fetch.
     */
    where?: JobSeekerInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobSeekerInfos to fetch.
     */
    orderBy?: JobSeekerInfoOrderByWithRelationInput | JobSeekerInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobSeekerInfos.
     */
    cursor?: JobSeekerInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobSeekerInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobSeekerInfos.
     */
    skip?: number
    distinct?: JobSeekerInfoScalarFieldEnum | JobSeekerInfoScalarFieldEnum[]
  }

  /**
   * JobSeekerInfo create
   */
  export type JobSeekerInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobSeekerInfo
     */
    select?: JobSeekerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobSeekerInfoInclude<ExtArgs> | null
    /**
     * The data needed to create a JobSeekerInfo.
     */
    data: XOR<JobSeekerInfoCreateInput, JobSeekerInfoUncheckedCreateInput>
  }

  /**
   * JobSeekerInfo createMany
   */
  export type JobSeekerInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JobSeekerInfos.
     */
    data: JobSeekerInfoCreateManyInput | JobSeekerInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JobSeekerInfo createManyAndReturn
   */
  export type JobSeekerInfoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobSeekerInfo
     */
    select?: JobSeekerInfoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many JobSeekerInfos.
     */
    data: JobSeekerInfoCreateManyInput | JobSeekerInfoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobSeekerInfoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobSeekerInfo update
   */
  export type JobSeekerInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobSeekerInfo
     */
    select?: JobSeekerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobSeekerInfoInclude<ExtArgs> | null
    /**
     * The data needed to update a JobSeekerInfo.
     */
    data: XOR<JobSeekerInfoUpdateInput, JobSeekerInfoUncheckedUpdateInput>
    /**
     * Choose, which JobSeekerInfo to update.
     */
    where: JobSeekerInfoWhereUniqueInput
  }

  /**
   * JobSeekerInfo updateMany
   */
  export type JobSeekerInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JobSeekerInfos.
     */
    data: XOR<JobSeekerInfoUpdateManyMutationInput, JobSeekerInfoUncheckedUpdateManyInput>
    /**
     * Filter which JobSeekerInfos to update
     */
    where?: JobSeekerInfoWhereInput
  }

  /**
   * JobSeekerInfo upsert
   */
  export type JobSeekerInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobSeekerInfo
     */
    select?: JobSeekerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobSeekerInfoInclude<ExtArgs> | null
    /**
     * The filter to search for the JobSeekerInfo to update in case it exists.
     */
    where: JobSeekerInfoWhereUniqueInput
    /**
     * In case the JobSeekerInfo found by the `where` argument doesn't exist, create a new JobSeekerInfo with this data.
     */
    create: XOR<JobSeekerInfoCreateInput, JobSeekerInfoUncheckedCreateInput>
    /**
     * In case the JobSeekerInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobSeekerInfoUpdateInput, JobSeekerInfoUncheckedUpdateInput>
  }

  /**
   * JobSeekerInfo delete
   */
  export type JobSeekerInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobSeekerInfo
     */
    select?: JobSeekerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobSeekerInfoInclude<ExtArgs> | null
    /**
     * Filter which JobSeekerInfo to delete.
     */
    where: JobSeekerInfoWhereUniqueInput
  }

  /**
   * JobSeekerInfo deleteMany
   */
  export type JobSeekerInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobSeekerInfos to delete
     */
    where?: JobSeekerInfoWhereInput
  }

  /**
   * JobSeekerInfo.applications
   */
  export type JobSeekerInfo$applicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    cursor?: ApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * JobSeekerInfo without action
   */
  export type JobSeekerInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobSeekerInfo
     */
    select?: JobSeekerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobSeekerInfoInclude<ExtArgs> | null
  }


  /**
   * Model EmployerInfo
   */

  export type AggregateEmployerInfo = {
    _count: EmployerInfoCountAggregateOutputType | null
    _avg: EmployerInfoAvgAggregateOutputType | null
    _sum: EmployerInfoSumAggregateOutputType | null
    _min: EmployerInfoMinAggregateOutputType | null
    _max: EmployerInfoMaxAggregateOutputType | null
  }

  export type EmployerInfoAvgAggregateOutputType = {
    id: number | null
    EmployeruserId: number | null
    jobPostedId: number | null
  }

  export type EmployerInfoSumAggregateOutputType = {
    id: number | null
    EmployeruserId: number | null
    jobPostedId: number | null
  }

  export type EmployerInfoMinAggregateOutputType = {
    id: number | null
    EmployeruserId: number | null
    jobPostedId: number | null
    role: string | null
  }

  export type EmployerInfoMaxAggregateOutputType = {
    id: number | null
    EmployeruserId: number | null
    jobPostedId: number | null
    role: string | null
  }

  export type EmployerInfoCountAggregateOutputType = {
    id: number
    EmployeruserId: number
    jobPostedId: number
    role: number
    _all: number
  }


  export type EmployerInfoAvgAggregateInputType = {
    id?: true
    EmployeruserId?: true
    jobPostedId?: true
  }

  export type EmployerInfoSumAggregateInputType = {
    id?: true
    EmployeruserId?: true
    jobPostedId?: true
  }

  export type EmployerInfoMinAggregateInputType = {
    id?: true
    EmployeruserId?: true
    jobPostedId?: true
    role?: true
  }

  export type EmployerInfoMaxAggregateInputType = {
    id?: true
    EmployeruserId?: true
    jobPostedId?: true
    role?: true
  }

  export type EmployerInfoCountAggregateInputType = {
    id?: true
    EmployeruserId?: true
    jobPostedId?: true
    role?: true
    _all?: true
  }

  export type EmployerInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmployerInfo to aggregate.
     */
    where?: EmployerInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployerInfos to fetch.
     */
    orderBy?: EmployerInfoOrderByWithRelationInput | EmployerInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployerInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployerInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployerInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmployerInfos
    **/
    _count?: true | EmployerInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmployerInfoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmployerInfoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployerInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployerInfoMaxAggregateInputType
  }

  export type GetEmployerInfoAggregateType<T extends EmployerInfoAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployerInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployerInfo[P]>
      : GetScalarType<T[P], AggregateEmployerInfo[P]>
  }




  export type EmployerInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployerInfoWhereInput
    orderBy?: EmployerInfoOrderByWithAggregationInput | EmployerInfoOrderByWithAggregationInput[]
    by: EmployerInfoScalarFieldEnum[] | EmployerInfoScalarFieldEnum
    having?: EmployerInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployerInfoCountAggregateInputType | true
    _avg?: EmployerInfoAvgAggregateInputType
    _sum?: EmployerInfoSumAggregateInputType
    _min?: EmployerInfoMinAggregateInputType
    _max?: EmployerInfoMaxAggregateInputType
  }

  export type EmployerInfoGroupByOutputType = {
    id: number
    EmployeruserId: number
    jobPostedId: number | null
    role: string
    _count: EmployerInfoCountAggregateOutputType | null
    _avg: EmployerInfoAvgAggregateOutputType | null
    _sum: EmployerInfoSumAggregateOutputType | null
    _min: EmployerInfoMinAggregateOutputType | null
    _max: EmployerInfoMaxAggregateOutputType | null
  }

  type GetEmployerInfoGroupByPayload<T extends EmployerInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployerInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployerInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployerInfoGroupByOutputType[P]>
            : GetScalarType<T[P], EmployerInfoGroupByOutputType[P]>
        }
      >
    >


  export type EmployerInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    EmployeruserId?: boolean
    jobPostedId?: boolean
    role?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    jobPosted?: boolean | EmployerInfo$jobPostedArgs<ExtArgs>
    applications?: boolean | EmployerInfo$applicationsArgs<ExtArgs>
    _count?: boolean | EmployerInfoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employerInfo"]>

  export type EmployerInfoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    EmployeruserId?: boolean
    jobPostedId?: boolean
    role?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    jobPosted?: boolean | EmployerInfo$jobPostedArgs<ExtArgs>
  }, ExtArgs["result"]["employerInfo"]>

  export type EmployerInfoSelectScalar = {
    id?: boolean
    EmployeruserId?: boolean
    jobPostedId?: boolean
    role?: boolean
  }

  export type EmployerInfoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    jobPosted?: boolean | EmployerInfo$jobPostedArgs<ExtArgs>
    applications?: boolean | EmployerInfo$applicationsArgs<ExtArgs>
    _count?: boolean | EmployerInfoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EmployerInfoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    jobPosted?: boolean | EmployerInfo$jobPostedArgs<ExtArgs>
  }

  export type $EmployerInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmployerInfo"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      jobPosted: Prisma.$JobPayload<ExtArgs> | null
      applications: Prisma.$ApplicationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      EmployeruserId: number
      jobPostedId: number | null
      role: string
    }, ExtArgs["result"]["employerInfo"]>
    composites: {}
  }

  type EmployerInfoGetPayload<S extends boolean | null | undefined | EmployerInfoDefaultArgs> = $Result.GetResult<Prisma.$EmployerInfoPayload, S>

  type EmployerInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EmployerInfoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmployerInfoCountAggregateInputType | true
    }

  export interface EmployerInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmployerInfo'], meta: { name: 'EmployerInfo' } }
    /**
     * Find zero or one EmployerInfo that matches the filter.
     * @param {EmployerInfoFindUniqueArgs} args - Arguments to find a EmployerInfo
     * @example
     * // Get one EmployerInfo
     * const employerInfo = await prisma.employerInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmployerInfoFindUniqueArgs>(args: SelectSubset<T, EmployerInfoFindUniqueArgs<ExtArgs>>): Prisma__EmployerInfoClient<$Result.GetResult<Prisma.$EmployerInfoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one EmployerInfo that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EmployerInfoFindUniqueOrThrowArgs} args - Arguments to find a EmployerInfo
     * @example
     * // Get one EmployerInfo
     * const employerInfo = await prisma.employerInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmployerInfoFindUniqueOrThrowArgs>(args: SelectSubset<T, EmployerInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmployerInfoClient<$Result.GetResult<Prisma.$EmployerInfoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first EmployerInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployerInfoFindFirstArgs} args - Arguments to find a EmployerInfo
     * @example
     * // Get one EmployerInfo
     * const employerInfo = await prisma.employerInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmployerInfoFindFirstArgs>(args?: SelectSubset<T, EmployerInfoFindFirstArgs<ExtArgs>>): Prisma__EmployerInfoClient<$Result.GetResult<Prisma.$EmployerInfoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first EmployerInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployerInfoFindFirstOrThrowArgs} args - Arguments to find a EmployerInfo
     * @example
     * // Get one EmployerInfo
     * const employerInfo = await prisma.employerInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmployerInfoFindFirstOrThrowArgs>(args?: SelectSubset<T, EmployerInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmployerInfoClient<$Result.GetResult<Prisma.$EmployerInfoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more EmployerInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployerInfoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmployerInfos
     * const employerInfos = await prisma.employerInfo.findMany()
     * 
     * // Get first 10 EmployerInfos
     * const employerInfos = await prisma.employerInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employerInfoWithIdOnly = await prisma.employerInfo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmployerInfoFindManyArgs>(args?: SelectSubset<T, EmployerInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployerInfoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a EmployerInfo.
     * @param {EmployerInfoCreateArgs} args - Arguments to create a EmployerInfo.
     * @example
     * // Create one EmployerInfo
     * const EmployerInfo = await prisma.employerInfo.create({
     *   data: {
     *     // ... data to create a EmployerInfo
     *   }
     * })
     * 
     */
    create<T extends EmployerInfoCreateArgs>(args: SelectSubset<T, EmployerInfoCreateArgs<ExtArgs>>): Prisma__EmployerInfoClient<$Result.GetResult<Prisma.$EmployerInfoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many EmployerInfos.
     * @param {EmployerInfoCreateManyArgs} args - Arguments to create many EmployerInfos.
     * @example
     * // Create many EmployerInfos
     * const employerInfo = await prisma.employerInfo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmployerInfoCreateManyArgs>(args?: SelectSubset<T, EmployerInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmployerInfos and returns the data saved in the database.
     * @param {EmployerInfoCreateManyAndReturnArgs} args - Arguments to create many EmployerInfos.
     * @example
     * // Create many EmployerInfos
     * const employerInfo = await prisma.employerInfo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmployerInfos and only return the `id`
     * const employerInfoWithIdOnly = await prisma.employerInfo.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmployerInfoCreateManyAndReturnArgs>(args?: SelectSubset<T, EmployerInfoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployerInfoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a EmployerInfo.
     * @param {EmployerInfoDeleteArgs} args - Arguments to delete one EmployerInfo.
     * @example
     * // Delete one EmployerInfo
     * const EmployerInfo = await prisma.employerInfo.delete({
     *   where: {
     *     // ... filter to delete one EmployerInfo
     *   }
     * })
     * 
     */
    delete<T extends EmployerInfoDeleteArgs>(args: SelectSubset<T, EmployerInfoDeleteArgs<ExtArgs>>): Prisma__EmployerInfoClient<$Result.GetResult<Prisma.$EmployerInfoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one EmployerInfo.
     * @param {EmployerInfoUpdateArgs} args - Arguments to update one EmployerInfo.
     * @example
     * // Update one EmployerInfo
     * const employerInfo = await prisma.employerInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmployerInfoUpdateArgs>(args: SelectSubset<T, EmployerInfoUpdateArgs<ExtArgs>>): Prisma__EmployerInfoClient<$Result.GetResult<Prisma.$EmployerInfoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more EmployerInfos.
     * @param {EmployerInfoDeleteManyArgs} args - Arguments to filter EmployerInfos to delete.
     * @example
     * // Delete a few EmployerInfos
     * const { count } = await prisma.employerInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmployerInfoDeleteManyArgs>(args?: SelectSubset<T, EmployerInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmployerInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployerInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmployerInfos
     * const employerInfo = await prisma.employerInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmployerInfoUpdateManyArgs>(args: SelectSubset<T, EmployerInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EmployerInfo.
     * @param {EmployerInfoUpsertArgs} args - Arguments to update or create a EmployerInfo.
     * @example
     * // Update or create a EmployerInfo
     * const employerInfo = await prisma.employerInfo.upsert({
     *   create: {
     *     // ... data to create a EmployerInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmployerInfo we want to update
     *   }
     * })
     */
    upsert<T extends EmployerInfoUpsertArgs>(args: SelectSubset<T, EmployerInfoUpsertArgs<ExtArgs>>): Prisma__EmployerInfoClient<$Result.GetResult<Prisma.$EmployerInfoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of EmployerInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployerInfoCountArgs} args - Arguments to filter EmployerInfos to count.
     * @example
     * // Count the number of EmployerInfos
     * const count = await prisma.employerInfo.count({
     *   where: {
     *     // ... the filter for the EmployerInfos we want to count
     *   }
     * })
    **/
    count<T extends EmployerInfoCountArgs>(
      args?: Subset<T, EmployerInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployerInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmployerInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployerInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployerInfoAggregateArgs>(args: Subset<T, EmployerInfoAggregateArgs>): Prisma.PrismaPromise<GetEmployerInfoAggregateType<T>>

    /**
     * Group by EmployerInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployerInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployerInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployerInfoGroupByArgs['orderBy'] }
        : { orderBy?: EmployerInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployerInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployerInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmployerInfo model
   */
  readonly fields: EmployerInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmployerInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployerInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    jobPosted<T extends EmployerInfo$jobPostedArgs<ExtArgs> = {}>(args?: Subset<T, EmployerInfo$jobPostedArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    applications<T extends EmployerInfo$applicationsArgs<ExtArgs> = {}>(args?: Subset<T, EmployerInfo$applicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmployerInfo model
   */ 
  interface EmployerInfoFieldRefs {
    readonly id: FieldRef<"EmployerInfo", 'Int'>
    readonly EmployeruserId: FieldRef<"EmployerInfo", 'Int'>
    readonly jobPostedId: FieldRef<"EmployerInfo", 'Int'>
    readonly role: FieldRef<"EmployerInfo", 'String'>
  }
    

  // Custom InputTypes
  /**
   * EmployerInfo findUnique
   */
  export type EmployerInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployerInfo
     */
    select?: EmployerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInfoInclude<ExtArgs> | null
    /**
     * Filter, which EmployerInfo to fetch.
     */
    where: EmployerInfoWhereUniqueInput
  }

  /**
   * EmployerInfo findUniqueOrThrow
   */
  export type EmployerInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployerInfo
     */
    select?: EmployerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInfoInclude<ExtArgs> | null
    /**
     * Filter, which EmployerInfo to fetch.
     */
    where: EmployerInfoWhereUniqueInput
  }

  /**
   * EmployerInfo findFirst
   */
  export type EmployerInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployerInfo
     */
    select?: EmployerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInfoInclude<ExtArgs> | null
    /**
     * Filter, which EmployerInfo to fetch.
     */
    where?: EmployerInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployerInfos to fetch.
     */
    orderBy?: EmployerInfoOrderByWithRelationInput | EmployerInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmployerInfos.
     */
    cursor?: EmployerInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployerInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployerInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmployerInfos.
     */
    distinct?: EmployerInfoScalarFieldEnum | EmployerInfoScalarFieldEnum[]
  }

  /**
   * EmployerInfo findFirstOrThrow
   */
  export type EmployerInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployerInfo
     */
    select?: EmployerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInfoInclude<ExtArgs> | null
    /**
     * Filter, which EmployerInfo to fetch.
     */
    where?: EmployerInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployerInfos to fetch.
     */
    orderBy?: EmployerInfoOrderByWithRelationInput | EmployerInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmployerInfos.
     */
    cursor?: EmployerInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployerInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployerInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmployerInfos.
     */
    distinct?: EmployerInfoScalarFieldEnum | EmployerInfoScalarFieldEnum[]
  }

  /**
   * EmployerInfo findMany
   */
  export type EmployerInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployerInfo
     */
    select?: EmployerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInfoInclude<ExtArgs> | null
    /**
     * Filter, which EmployerInfos to fetch.
     */
    where?: EmployerInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmployerInfos to fetch.
     */
    orderBy?: EmployerInfoOrderByWithRelationInput | EmployerInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmployerInfos.
     */
    cursor?: EmployerInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmployerInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmployerInfos.
     */
    skip?: number
    distinct?: EmployerInfoScalarFieldEnum | EmployerInfoScalarFieldEnum[]
  }

  /**
   * EmployerInfo create
   */
  export type EmployerInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployerInfo
     */
    select?: EmployerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInfoInclude<ExtArgs> | null
    /**
     * The data needed to create a EmployerInfo.
     */
    data: XOR<EmployerInfoCreateInput, EmployerInfoUncheckedCreateInput>
  }

  /**
   * EmployerInfo createMany
   */
  export type EmployerInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmployerInfos.
     */
    data: EmployerInfoCreateManyInput | EmployerInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmployerInfo createManyAndReturn
   */
  export type EmployerInfoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployerInfo
     */
    select?: EmployerInfoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many EmployerInfos.
     */
    data: EmployerInfoCreateManyInput | EmployerInfoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInfoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmployerInfo update
   */
  export type EmployerInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployerInfo
     */
    select?: EmployerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInfoInclude<ExtArgs> | null
    /**
     * The data needed to update a EmployerInfo.
     */
    data: XOR<EmployerInfoUpdateInput, EmployerInfoUncheckedUpdateInput>
    /**
     * Choose, which EmployerInfo to update.
     */
    where: EmployerInfoWhereUniqueInput
  }

  /**
   * EmployerInfo updateMany
   */
  export type EmployerInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmployerInfos.
     */
    data: XOR<EmployerInfoUpdateManyMutationInput, EmployerInfoUncheckedUpdateManyInput>
    /**
     * Filter which EmployerInfos to update
     */
    where?: EmployerInfoWhereInput
  }

  /**
   * EmployerInfo upsert
   */
  export type EmployerInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployerInfo
     */
    select?: EmployerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInfoInclude<ExtArgs> | null
    /**
     * The filter to search for the EmployerInfo to update in case it exists.
     */
    where: EmployerInfoWhereUniqueInput
    /**
     * In case the EmployerInfo found by the `where` argument doesn't exist, create a new EmployerInfo with this data.
     */
    create: XOR<EmployerInfoCreateInput, EmployerInfoUncheckedCreateInput>
    /**
     * In case the EmployerInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployerInfoUpdateInput, EmployerInfoUncheckedUpdateInput>
  }

  /**
   * EmployerInfo delete
   */
  export type EmployerInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployerInfo
     */
    select?: EmployerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInfoInclude<ExtArgs> | null
    /**
     * Filter which EmployerInfo to delete.
     */
    where: EmployerInfoWhereUniqueInput
  }

  /**
   * EmployerInfo deleteMany
   */
  export type EmployerInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmployerInfos to delete
     */
    where?: EmployerInfoWhereInput
  }

  /**
   * EmployerInfo.jobPosted
   */
  export type EmployerInfo$jobPostedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    where?: JobWhereInput
  }

  /**
   * EmployerInfo.applications
   */
  export type EmployerInfo$applicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    cursor?: ApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * EmployerInfo without action
   */
  export type EmployerInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployerInfo
     */
    select?: EmployerInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInfoInclude<ExtArgs> | null
  }


  /**
   * Model JobInfo
   */

  export type AggregateJobInfo = {
    _count: JobInfoCountAggregateOutputType | null
    _avg: JobInfoAvgAggregateOutputType | null
    _sum: JobInfoSumAggregateOutputType | null
    _min: JobInfoMinAggregateOutputType | null
    _max: JobInfoMaxAggregateOutputType | null
  }

  export type JobInfoAvgAggregateOutputType = {
    id: number | null
    jobId: number | null
  }

  export type JobInfoSumAggregateOutputType = {
    id: number | null
    jobId: number | null
  }

  export type JobInfoMinAggregateOutputType = {
    id: number | null
    jobId: number | null
    jobTitle: string | null
  }

  export type JobInfoMaxAggregateOutputType = {
    id: number | null
    jobId: number | null
    jobTitle: string | null
  }

  export type JobInfoCountAggregateOutputType = {
    id: number
    jobId: number
    jobTitle: number
    _all: number
  }


  export type JobInfoAvgAggregateInputType = {
    id?: true
    jobId?: true
  }

  export type JobInfoSumAggregateInputType = {
    id?: true
    jobId?: true
  }

  export type JobInfoMinAggregateInputType = {
    id?: true
    jobId?: true
    jobTitle?: true
  }

  export type JobInfoMaxAggregateInputType = {
    id?: true
    jobId?: true
    jobTitle?: true
  }

  export type JobInfoCountAggregateInputType = {
    id?: true
    jobId?: true
    jobTitle?: true
    _all?: true
  }

  export type JobInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobInfo to aggregate.
     */
    where?: JobInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobInfos to fetch.
     */
    orderBy?: JobInfoOrderByWithRelationInput | JobInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobInfos
    **/
    _count?: true | JobInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobInfoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobInfoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobInfoMaxAggregateInputType
  }

  export type GetJobInfoAggregateType<T extends JobInfoAggregateArgs> = {
        [P in keyof T & keyof AggregateJobInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobInfo[P]>
      : GetScalarType<T[P], AggregateJobInfo[P]>
  }




  export type JobInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobInfoWhereInput
    orderBy?: JobInfoOrderByWithAggregationInput | JobInfoOrderByWithAggregationInput[]
    by: JobInfoScalarFieldEnum[] | JobInfoScalarFieldEnum
    having?: JobInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobInfoCountAggregateInputType | true
    _avg?: JobInfoAvgAggregateInputType
    _sum?: JobInfoSumAggregateInputType
    _min?: JobInfoMinAggregateInputType
    _max?: JobInfoMaxAggregateInputType
  }

  export type JobInfoGroupByOutputType = {
    id: number
    jobId: number
    jobTitle: string
    _count: JobInfoCountAggregateOutputType | null
    _avg: JobInfoAvgAggregateOutputType | null
    _sum: JobInfoSumAggregateOutputType | null
    _min: JobInfoMinAggregateOutputType | null
    _max: JobInfoMaxAggregateOutputType | null
  }

  type GetJobInfoGroupByPayload<T extends JobInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobInfoGroupByOutputType[P]>
            : GetScalarType<T[P], JobInfoGroupByOutputType[P]>
        }
      >
    >


  export type JobInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    jobTitle?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
    applications?: boolean | JobInfo$applicationsArgs<ExtArgs>
    _count?: boolean | JobInfoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobInfo"]>

  export type JobInfoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    jobTitle?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobInfo"]>

  export type JobInfoSelectScalar = {
    id?: boolean
    jobId?: boolean
    jobTitle?: boolean
  }

  export type JobInfoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
    applications?: boolean | JobInfo$applicationsArgs<ExtArgs>
    _count?: boolean | JobInfoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type JobInfoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
  }

  export type $JobInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JobInfo"
    objects: {
      job: Prisma.$JobPayload<ExtArgs>
      applications: Prisma.$ApplicationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      jobId: number
      jobTitle: string
    }, ExtArgs["result"]["jobInfo"]>
    composites: {}
  }

  type JobInfoGetPayload<S extends boolean | null | undefined | JobInfoDefaultArgs> = $Result.GetResult<Prisma.$JobInfoPayload, S>

  type JobInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<JobInfoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: JobInfoCountAggregateInputType | true
    }

  export interface JobInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JobInfo'], meta: { name: 'JobInfo' } }
    /**
     * Find zero or one JobInfo that matches the filter.
     * @param {JobInfoFindUniqueArgs} args - Arguments to find a JobInfo
     * @example
     * // Get one JobInfo
     * const jobInfo = await prisma.jobInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobInfoFindUniqueArgs>(args: SelectSubset<T, JobInfoFindUniqueArgs<ExtArgs>>): Prisma__JobInfoClient<$Result.GetResult<Prisma.$JobInfoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one JobInfo that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {JobInfoFindUniqueOrThrowArgs} args - Arguments to find a JobInfo
     * @example
     * // Get one JobInfo
     * const jobInfo = await prisma.jobInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobInfoFindUniqueOrThrowArgs>(args: SelectSubset<T, JobInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobInfoClient<$Result.GetResult<Prisma.$JobInfoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first JobInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobInfoFindFirstArgs} args - Arguments to find a JobInfo
     * @example
     * // Get one JobInfo
     * const jobInfo = await prisma.jobInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobInfoFindFirstArgs>(args?: SelectSubset<T, JobInfoFindFirstArgs<ExtArgs>>): Prisma__JobInfoClient<$Result.GetResult<Prisma.$JobInfoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first JobInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobInfoFindFirstOrThrowArgs} args - Arguments to find a JobInfo
     * @example
     * // Get one JobInfo
     * const jobInfo = await prisma.jobInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobInfoFindFirstOrThrowArgs>(args?: SelectSubset<T, JobInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobInfoClient<$Result.GetResult<Prisma.$JobInfoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more JobInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobInfoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobInfos
     * const jobInfos = await prisma.jobInfo.findMany()
     * 
     * // Get first 10 JobInfos
     * const jobInfos = await prisma.jobInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobInfoWithIdOnly = await prisma.jobInfo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobInfoFindManyArgs>(args?: SelectSubset<T, JobInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobInfoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a JobInfo.
     * @param {JobInfoCreateArgs} args - Arguments to create a JobInfo.
     * @example
     * // Create one JobInfo
     * const JobInfo = await prisma.jobInfo.create({
     *   data: {
     *     // ... data to create a JobInfo
     *   }
     * })
     * 
     */
    create<T extends JobInfoCreateArgs>(args: SelectSubset<T, JobInfoCreateArgs<ExtArgs>>): Prisma__JobInfoClient<$Result.GetResult<Prisma.$JobInfoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many JobInfos.
     * @param {JobInfoCreateManyArgs} args - Arguments to create many JobInfos.
     * @example
     * // Create many JobInfos
     * const jobInfo = await prisma.jobInfo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobInfoCreateManyArgs>(args?: SelectSubset<T, JobInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JobInfos and returns the data saved in the database.
     * @param {JobInfoCreateManyAndReturnArgs} args - Arguments to create many JobInfos.
     * @example
     * // Create many JobInfos
     * const jobInfo = await prisma.jobInfo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JobInfos and only return the `id`
     * const jobInfoWithIdOnly = await prisma.jobInfo.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobInfoCreateManyAndReturnArgs>(args?: SelectSubset<T, JobInfoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobInfoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a JobInfo.
     * @param {JobInfoDeleteArgs} args - Arguments to delete one JobInfo.
     * @example
     * // Delete one JobInfo
     * const JobInfo = await prisma.jobInfo.delete({
     *   where: {
     *     // ... filter to delete one JobInfo
     *   }
     * })
     * 
     */
    delete<T extends JobInfoDeleteArgs>(args: SelectSubset<T, JobInfoDeleteArgs<ExtArgs>>): Prisma__JobInfoClient<$Result.GetResult<Prisma.$JobInfoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one JobInfo.
     * @param {JobInfoUpdateArgs} args - Arguments to update one JobInfo.
     * @example
     * // Update one JobInfo
     * const jobInfo = await prisma.jobInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobInfoUpdateArgs>(args: SelectSubset<T, JobInfoUpdateArgs<ExtArgs>>): Prisma__JobInfoClient<$Result.GetResult<Prisma.$JobInfoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more JobInfos.
     * @param {JobInfoDeleteManyArgs} args - Arguments to filter JobInfos to delete.
     * @example
     * // Delete a few JobInfos
     * const { count } = await prisma.jobInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobInfoDeleteManyArgs>(args?: SelectSubset<T, JobInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobInfos
     * const jobInfo = await prisma.jobInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobInfoUpdateManyArgs>(args: SelectSubset<T, JobInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one JobInfo.
     * @param {JobInfoUpsertArgs} args - Arguments to update or create a JobInfo.
     * @example
     * // Update or create a JobInfo
     * const jobInfo = await prisma.jobInfo.upsert({
     *   create: {
     *     // ... data to create a JobInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobInfo we want to update
     *   }
     * })
     */
    upsert<T extends JobInfoUpsertArgs>(args: SelectSubset<T, JobInfoUpsertArgs<ExtArgs>>): Prisma__JobInfoClient<$Result.GetResult<Prisma.$JobInfoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of JobInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobInfoCountArgs} args - Arguments to filter JobInfos to count.
     * @example
     * // Count the number of JobInfos
     * const count = await prisma.jobInfo.count({
     *   where: {
     *     // ... the filter for the JobInfos we want to count
     *   }
     * })
    **/
    count<T extends JobInfoCountArgs>(
      args?: Subset<T, JobInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobInfoAggregateArgs>(args: Subset<T, JobInfoAggregateArgs>): Prisma.PrismaPromise<GetJobInfoAggregateType<T>>

    /**
     * Group by JobInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobInfoGroupByArgs['orderBy'] }
        : { orderBy?: JobInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobInfo model
   */
  readonly fields: JobInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JobInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    job<T extends JobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobDefaultArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    applications<T extends JobInfo$applicationsArgs<ExtArgs> = {}>(args?: Subset<T, JobInfo$applicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JobInfo model
   */ 
  interface JobInfoFieldRefs {
    readonly id: FieldRef<"JobInfo", 'Int'>
    readonly jobId: FieldRef<"JobInfo", 'Int'>
    readonly jobTitle: FieldRef<"JobInfo", 'String'>
  }
    

  // Custom InputTypes
  /**
   * JobInfo findUnique
   */
  export type JobInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobInfo
     */
    select?: JobInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInfoInclude<ExtArgs> | null
    /**
     * Filter, which JobInfo to fetch.
     */
    where: JobInfoWhereUniqueInput
  }

  /**
   * JobInfo findUniqueOrThrow
   */
  export type JobInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobInfo
     */
    select?: JobInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInfoInclude<ExtArgs> | null
    /**
     * Filter, which JobInfo to fetch.
     */
    where: JobInfoWhereUniqueInput
  }

  /**
   * JobInfo findFirst
   */
  export type JobInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobInfo
     */
    select?: JobInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInfoInclude<ExtArgs> | null
    /**
     * Filter, which JobInfo to fetch.
     */
    where?: JobInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobInfos to fetch.
     */
    orderBy?: JobInfoOrderByWithRelationInput | JobInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobInfos.
     */
    cursor?: JobInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobInfos.
     */
    distinct?: JobInfoScalarFieldEnum | JobInfoScalarFieldEnum[]
  }

  /**
   * JobInfo findFirstOrThrow
   */
  export type JobInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobInfo
     */
    select?: JobInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInfoInclude<ExtArgs> | null
    /**
     * Filter, which JobInfo to fetch.
     */
    where?: JobInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobInfos to fetch.
     */
    orderBy?: JobInfoOrderByWithRelationInput | JobInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobInfos.
     */
    cursor?: JobInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobInfos.
     */
    distinct?: JobInfoScalarFieldEnum | JobInfoScalarFieldEnum[]
  }

  /**
   * JobInfo findMany
   */
  export type JobInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobInfo
     */
    select?: JobInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInfoInclude<ExtArgs> | null
    /**
     * Filter, which JobInfos to fetch.
     */
    where?: JobInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobInfos to fetch.
     */
    orderBy?: JobInfoOrderByWithRelationInput | JobInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobInfos.
     */
    cursor?: JobInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobInfos.
     */
    skip?: number
    distinct?: JobInfoScalarFieldEnum | JobInfoScalarFieldEnum[]
  }

  /**
   * JobInfo create
   */
  export type JobInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobInfo
     */
    select?: JobInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInfoInclude<ExtArgs> | null
    /**
     * The data needed to create a JobInfo.
     */
    data: XOR<JobInfoCreateInput, JobInfoUncheckedCreateInput>
  }

  /**
   * JobInfo createMany
   */
  export type JobInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JobInfos.
     */
    data: JobInfoCreateManyInput | JobInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JobInfo createManyAndReturn
   */
  export type JobInfoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobInfo
     */
    select?: JobInfoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many JobInfos.
     */
    data: JobInfoCreateManyInput | JobInfoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInfoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobInfo update
   */
  export type JobInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobInfo
     */
    select?: JobInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInfoInclude<ExtArgs> | null
    /**
     * The data needed to update a JobInfo.
     */
    data: XOR<JobInfoUpdateInput, JobInfoUncheckedUpdateInput>
    /**
     * Choose, which JobInfo to update.
     */
    where: JobInfoWhereUniqueInput
  }

  /**
   * JobInfo updateMany
   */
  export type JobInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JobInfos.
     */
    data: XOR<JobInfoUpdateManyMutationInput, JobInfoUncheckedUpdateManyInput>
    /**
     * Filter which JobInfos to update
     */
    where?: JobInfoWhereInput
  }

  /**
   * JobInfo upsert
   */
  export type JobInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobInfo
     */
    select?: JobInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInfoInclude<ExtArgs> | null
    /**
     * The filter to search for the JobInfo to update in case it exists.
     */
    where: JobInfoWhereUniqueInput
    /**
     * In case the JobInfo found by the `where` argument doesn't exist, create a new JobInfo with this data.
     */
    create: XOR<JobInfoCreateInput, JobInfoUncheckedCreateInput>
    /**
     * In case the JobInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobInfoUpdateInput, JobInfoUncheckedUpdateInput>
  }

  /**
   * JobInfo delete
   */
  export type JobInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobInfo
     */
    select?: JobInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInfoInclude<ExtArgs> | null
    /**
     * Filter which JobInfo to delete.
     */
    where: JobInfoWhereUniqueInput
  }

  /**
   * JobInfo deleteMany
   */
  export type JobInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobInfos to delete
     */
    where?: JobInfoWhereInput
  }

  /**
   * JobInfo.applications
   */
  export type JobInfo$applicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    cursor?: ApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * JobInfo without action
   */
  export type JobInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobInfo
     */
    select?: JobInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInfoInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    address: 'address',
    niches: 'niches',
    password: 'password',
    resume: 'resume',
    coverletter: 'coverletter',
    role: 'role',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const JobScalarFieldEnum: {
    id: 'id',
    title: 'title',
    jobType: 'jobType',
    location: 'location',
    companyName: 'companyName',
    introduction: 'introduction',
    responsibilities: 'responsibilities',
    qualifications: 'qualifications',
    offers: 'offers',
    salary: 'salary',
    hiringMultipleCandidates: 'hiringMultipleCandidates',
    personalWebsite: 'personalWebsite',
    jobNiche: 'jobNiche',
    newsLettersSent: 'newsLettersSent',
    jobPostedOn: 'jobPostedOn',
    postedById: 'postedById'
  };

  export type JobScalarFieldEnum = (typeof JobScalarFieldEnum)[keyof typeof JobScalarFieldEnum]


  export const ApplicationScalarFieldEnum: {
    id: 'id',
    jobSeekerInfoId: 'jobSeekerInfoId',
    employerInfoId: 'employerInfoId',
    jobInfoId: 'jobInfoId',
    deletedBy: 'deletedBy'
  };

  export type ApplicationScalarFieldEnum = (typeof ApplicationScalarFieldEnum)[keyof typeof ApplicationScalarFieldEnum]


  export const JobSeekerInfoScalarFieldEnum: {
    id: 'id',
    JobSeekeruserId: 'JobSeekeruserId',
    forWhichJobId: 'forWhichJobId',
    name: 'name',
    email: 'email',
    phone: 'phone',
    address: 'address',
    coverletter: 'coverletter',
    role: 'role',
    resume: 'resume'
  };

  export type JobSeekerInfoScalarFieldEnum = (typeof JobSeekerInfoScalarFieldEnum)[keyof typeof JobSeekerInfoScalarFieldEnum]


  export const EmployerInfoScalarFieldEnum: {
    id: 'id',
    EmployeruserId: 'EmployeruserId',
    jobPostedId: 'jobPostedId',
    role: 'role'
  };

  export type EmployerInfoScalarFieldEnum = (typeof EmployerInfoScalarFieldEnum)[keyof typeof EmployerInfoScalarFieldEnum]


  export const JobInfoScalarFieldEnum: {
    id: 'id',
    jobId: 'jobId',
    jobTitle: 'jobTitle'
  };

  export type JobInfoScalarFieldEnum = (typeof JobInfoScalarFieldEnum)[keyof typeof JobInfoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'ROLE'
   */
  export type EnumROLEFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ROLE'>
    


  /**
   * Reference to a field of type 'ROLE[]'
   */
  export type ListEnumROLEFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ROLE[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'JobType'
   */
  export type EnumJobTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobType'>
    


  /**
   * Reference to a field of type 'JobType[]'
   */
  export type ListEnumJobTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobType[]'>
    


  /**
   * Reference to a field of type 'YesNo'
   */
  export type EnumYesNoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'YesNo'>
    


  /**
   * Reference to a field of type 'YesNo[]'
   */
  export type ListEnumYesNoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'YesNo[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    phone?: StringFilter<"User"> | string
    address?: StringFilter<"User"> | string
    niches?: JsonFilter<"User">
    password?: StringFilter<"User"> | string
    resume?: JsonNullableFilter<"User">
    coverletter?: StringNullableFilter<"User"> | string | null
    role?: EnumROLEFilter<"User"> | $Enums.ROLE
    createdAt?: DateTimeNullableFilter<"User"> | Date | string | null
    jobs?: JobListRelationFilter
    JobSeekerInfo?: JobSeekerInfoListRelationFilter
    EmployerInfo?: EmployerInfoListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    niches?: SortOrder
    password?: SortOrder
    resume?: SortOrderInput | SortOrder
    coverletter?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    jobs?: JobOrderByRelationAggregateInput
    JobSeekerInfo?: JobSeekerInfoOrderByRelationAggregateInput
    EmployerInfo?: EmployerInfoOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    phone?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    address?: StringFilter<"User"> | string
    niches?: JsonFilter<"User">
    password?: StringFilter<"User"> | string
    resume?: JsonNullableFilter<"User">
    coverletter?: StringNullableFilter<"User"> | string | null
    role?: EnumROLEFilter<"User"> | $Enums.ROLE
    createdAt?: DateTimeNullableFilter<"User"> | Date | string | null
    jobs?: JobListRelationFilter
    JobSeekerInfo?: JobSeekerInfoListRelationFilter
    EmployerInfo?: EmployerInfoListRelationFilter
  }, "id" | "email" | "phone">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    niches?: SortOrder
    password?: SortOrder
    resume?: SortOrderInput | SortOrder
    coverletter?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    phone?: StringWithAggregatesFilter<"User"> | string
    address?: StringWithAggregatesFilter<"User"> | string
    niches?: JsonWithAggregatesFilter<"User">
    password?: StringWithAggregatesFilter<"User"> | string
    resume?: JsonNullableWithAggregatesFilter<"User">
    coverletter?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumROLEWithAggregatesFilter<"User"> | $Enums.ROLE
    createdAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type JobWhereInput = {
    AND?: JobWhereInput | JobWhereInput[]
    OR?: JobWhereInput[]
    NOT?: JobWhereInput | JobWhereInput[]
    id?: IntFilter<"Job"> | number
    title?: StringFilter<"Job"> | string
    jobType?: EnumJobTypeFilter<"Job"> | $Enums.JobType
    location?: StringFilter<"Job"> | string
    companyName?: StringFilter<"Job"> | string
    introduction?: StringNullableFilter<"Job"> | string | null
    responsibilities?: StringFilter<"Job"> | string
    qualifications?: StringFilter<"Job"> | string
    offers?: StringNullableFilter<"Job"> | string | null
    salary?: StringFilter<"Job"> | string
    hiringMultipleCandidates?: EnumYesNoFilter<"Job"> | $Enums.YesNo
    personalWebsite?: JsonNullableFilter<"Job">
    jobNiche?: StringFilter<"Job"> | string
    newsLettersSent?: BoolFilter<"Job"> | boolean
    jobPostedOn?: DateTimeFilter<"Job"> | Date | string
    postedById?: IntFilter<"Job"> | number
    postedBy?: XOR<UserRelationFilter, UserWhereInput>
    JobInfo?: JobInfoListRelationFilter
    JobSeekerInfo?: JobSeekerInfoListRelationFilter
    EmployerInfo?: EmployerInfoListRelationFilter
  }

  export type JobOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    jobType?: SortOrder
    location?: SortOrder
    companyName?: SortOrder
    introduction?: SortOrderInput | SortOrder
    responsibilities?: SortOrder
    qualifications?: SortOrder
    offers?: SortOrderInput | SortOrder
    salary?: SortOrder
    hiringMultipleCandidates?: SortOrder
    personalWebsite?: SortOrderInput | SortOrder
    jobNiche?: SortOrder
    newsLettersSent?: SortOrder
    jobPostedOn?: SortOrder
    postedById?: SortOrder
    postedBy?: UserOrderByWithRelationInput
    JobInfo?: JobInfoOrderByRelationAggregateInput
    JobSeekerInfo?: JobSeekerInfoOrderByRelationAggregateInput
    EmployerInfo?: EmployerInfoOrderByRelationAggregateInput
  }

  export type JobWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: JobWhereInput | JobWhereInput[]
    OR?: JobWhereInput[]
    NOT?: JobWhereInput | JobWhereInput[]
    title?: StringFilter<"Job"> | string
    jobType?: EnumJobTypeFilter<"Job"> | $Enums.JobType
    location?: StringFilter<"Job"> | string
    companyName?: StringFilter<"Job"> | string
    introduction?: StringNullableFilter<"Job"> | string | null
    responsibilities?: StringFilter<"Job"> | string
    qualifications?: StringFilter<"Job"> | string
    offers?: StringNullableFilter<"Job"> | string | null
    salary?: StringFilter<"Job"> | string
    hiringMultipleCandidates?: EnumYesNoFilter<"Job"> | $Enums.YesNo
    personalWebsite?: JsonNullableFilter<"Job">
    jobNiche?: StringFilter<"Job"> | string
    newsLettersSent?: BoolFilter<"Job"> | boolean
    jobPostedOn?: DateTimeFilter<"Job"> | Date | string
    postedById?: IntFilter<"Job"> | number
    postedBy?: XOR<UserRelationFilter, UserWhereInput>
    JobInfo?: JobInfoListRelationFilter
    JobSeekerInfo?: JobSeekerInfoListRelationFilter
    EmployerInfo?: EmployerInfoListRelationFilter
  }, "id">

  export type JobOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    jobType?: SortOrder
    location?: SortOrder
    companyName?: SortOrder
    introduction?: SortOrderInput | SortOrder
    responsibilities?: SortOrder
    qualifications?: SortOrder
    offers?: SortOrderInput | SortOrder
    salary?: SortOrder
    hiringMultipleCandidates?: SortOrder
    personalWebsite?: SortOrderInput | SortOrder
    jobNiche?: SortOrder
    newsLettersSent?: SortOrder
    jobPostedOn?: SortOrder
    postedById?: SortOrder
    _count?: JobCountOrderByAggregateInput
    _avg?: JobAvgOrderByAggregateInput
    _max?: JobMaxOrderByAggregateInput
    _min?: JobMinOrderByAggregateInput
    _sum?: JobSumOrderByAggregateInput
  }

  export type JobScalarWhereWithAggregatesInput = {
    AND?: JobScalarWhereWithAggregatesInput | JobScalarWhereWithAggregatesInput[]
    OR?: JobScalarWhereWithAggregatesInput[]
    NOT?: JobScalarWhereWithAggregatesInput | JobScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Job"> | number
    title?: StringWithAggregatesFilter<"Job"> | string
    jobType?: EnumJobTypeWithAggregatesFilter<"Job"> | $Enums.JobType
    location?: StringWithAggregatesFilter<"Job"> | string
    companyName?: StringWithAggregatesFilter<"Job"> | string
    introduction?: StringNullableWithAggregatesFilter<"Job"> | string | null
    responsibilities?: StringWithAggregatesFilter<"Job"> | string
    qualifications?: StringWithAggregatesFilter<"Job"> | string
    offers?: StringNullableWithAggregatesFilter<"Job"> | string | null
    salary?: StringWithAggregatesFilter<"Job"> | string
    hiringMultipleCandidates?: EnumYesNoWithAggregatesFilter<"Job"> | $Enums.YesNo
    personalWebsite?: JsonNullableWithAggregatesFilter<"Job">
    jobNiche?: StringWithAggregatesFilter<"Job"> | string
    newsLettersSent?: BoolWithAggregatesFilter<"Job"> | boolean
    jobPostedOn?: DateTimeWithAggregatesFilter<"Job"> | Date | string
    postedById?: IntWithAggregatesFilter<"Job"> | number
  }

  export type ApplicationWhereInput = {
    AND?: ApplicationWhereInput | ApplicationWhereInput[]
    OR?: ApplicationWhereInput[]
    NOT?: ApplicationWhereInput | ApplicationWhereInput[]
    id?: IntFilter<"Application"> | number
    jobSeekerInfoId?: IntFilter<"Application"> | number
    employerInfoId?: IntFilter<"Application"> | number
    jobInfoId?: IntFilter<"Application"> | number
    deletedBy?: JsonNullableFilter<"Application">
    jobSeekerInfo?: XOR<JobSeekerInfoRelationFilter, JobSeekerInfoWhereInput>
    employerInfo?: XOR<EmployerInfoRelationFilter, EmployerInfoWhereInput>
    jobInfo?: XOR<JobInfoRelationFilter, JobInfoWhereInput>
  }

  export type ApplicationOrderByWithRelationInput = {
    id?: SortOrder
    jobSeekerInfoId?: SortOrder
    employerInfoId?: SortOrder
    jobInfoId?: SortOrder
    deletedBy?: SortOrderInput | SortOrder
    jobSeekerInfo?: JobSeekerInfoOrderByWithRelationInput
    employerInfo?: EmployerInfoOrderByWithRelationInput
    jobInfo?: JobInfoOrderByWithRelationInput
  }

  export type ApplicationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ApplicationWhereInput | ApplicationWhereInput[]
    OR?: ApplicationWhereInput[]
    NOT?: ApplicationWhereInput | ApplicationWhereInput[]
    jobSeekerInfoId?: IntFilter<"Application"> | number
    employerInfoId?: IntFilter<"Application"> | number
    jobInfoId?: IntFilter<"Application"> | number
    deletedBy?: JsonNullableFilter<"Application">
    jobSeekerInfo?: XOR<JobSeekerInfoRelationFilter, JobSeekerInfoWhereInput>
    employerInfo?: XOR<EmployerInfoRelationFilter, EmployerInfoWhereInput>
    jobInfo?: XOR<JobInfoRelationFilter, JobInfoWhereInput>
  }, "id">

  export type ApplicationOrderByWithAggregationInput = {
    id?: SortOrder
    jobSeekerInfoId?: SortOrder
    employerInfoId?: SortOrder
    jobInfoId?: SortOrder
    deletedBy?: SortOrderInput | SortOrder
    _count?: ApplicationCountOrderByAggregateInput
    _avg?: ApplicationAvgOrderByAggregateInput
    _max?: ApplicationMaxOrderByAggregateInput
    _min?: ApplicationMinOrderByAggregateInput
    _sum?: ApplicationSumOrderByAggregateInput
  }

  export type ApplicationScalarWhereWithAggregatesInput = {
    AND?: ApplicationScalarWhereWithAggregatesInput | ApplicationScalarWhereWithAggregatesInput[]
    OR?: ApplicationScalarWhereWithAggregatesInput[]
    NOT?: ApplicationScalarWhereWithAggregatesInput | ApplicationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Application"> | number
    jobSeekerInfoId?: IntWithAggregatesFilter<"Application"> | number
    employerInfoId?: IntWithAggregatesFilter<"Application"> | number
    jobInfoId?: IntWithAggregatesFilter<"Application"> | number
    deletedBy?: JsonNullableWithAggregatesFilter<"Application">
  }

  export type JobSeekerInfoWhereInput = {
    AND?: JobSeekerInfoWhereInput | JobSeekerInfoWhereInput[]
    OR?: JobSeekerInfoWhereInput[]
    NOT?: JobSeekerInfoWhereInput | JobSeekerInfoWhereInput[]
    id?: IntFilter<"JobSeekerInfo"> | number
    JobSeekeruserId?: IntFilter<"JobSeekerInfo"> | number
    forWhichJobId?: IntFilter<"JobSeekerInfo"> | number
    name?: StringFilter<"JobSeekerInfo"> | string
    email?: StringFilter<"JobSeekerInfo"> | string
    phone?: StringFilter<"JobSeekerInfo"> | string
    address?: StringFilter<"JobSeekerInfo"> | string
    coverletter?: StringFilter<"JobSeekerInfo"> | string
    role?: StringFilter<"JobSeekerInfo"> | string
    resume?: JsonNullableFilter<"JobSeekerInfo">
    user?: XOR<UserRelationFilter, UserWhereInput>
    forWhichJob?: XOR<JobRelationFilter, JobWhereInput>
    applications?: ApplicationListRelationFilter
  }

  export type JobSeekerInfoOrderByWithRelationInput = {
    id?: SortOrder
    JobSeekeruserId?: SortOrder
    forWhichJobId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    coverletter?: SortOrder
    role?: SortOrder
    resume?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    forWhichJob?: JobOrderByWithRelationInput
    applications?: ApplicationOrderByRelationAggregateInput
  }

  export type JobSeekerInfoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: JobSeekerInfoWhereInput | JobSeekerInfoWhereInput[]
    OR?: JobSeekerInfoWhereInput[]
    NOT?: JobSeekerInfoWhereInput | JobSeekerInfoWhereInput[]
    JobSeekeruserId?: IntFilter<"JobSeekerInfo"> | number
    forWhichJobId?: IntFilter<"JobSeekerInfo"> | number
    name?: StringFilter<"JobSeekerInfo"> | string
    email?: StringFilter<"JobSeekerInfo"> | string
    phone?: StringFilter<"JobSeekerInfo"> | string
    address?: StringFilter<"JobSeekerInfo"> | string
    coverletter?: StringFilter<"JobSeekerInfo"> | string
    role?: StringFilter<"JobSeekerInfo"> | string
    resume?: JsonNullableFilter<"JobSeekerInfo">
    user?: XOR<UserRelationFilter, UserWhereInput>
    forWhichJob?: XOR<JobRelationFilter, JobWhereInput>
    applications?: ApplicationListRelationFilter
  }, "id">

  export type JobSeekerInfoOrderByWithAggregationInput = {
    id?: SortOrder
    JobSeekeruserId?: SortOrder
    forWhichJobId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    coverletter?: SortOrder
    role?: SortOrder
    resume?: SortOrderInput | SortOrder
    _count?: JobSeekerInfoCountOrderByAggregateInput
    _avg?: JobSeekerInfoAvgOrderByAggregateInput
    _max?: JobSeekerInfoMaxOrderByAggregateInput
    _min?: JobSeekerInfoMinOrderByAggregateInput
    _sum?: JobSeekerInfoSumOrderByAggregateInput
  }

  export type JobSeekerInfoScalarWhereWithAggregatesInput = {
    AND?: JobSeekerInfoScalarWhereWithAggregatesInput | JobSeekerInfoScalarWhereWithAggregatesInput[]
    OR?: JobSeekerInfoScalarWhereWithAggregatesInput[]
    NOT?: JobSeekerInfoScalarWhereWithAggregatesInput | JobSeekerInfoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"JobSeekerInfo"> | number
    JobSeekeruserId?: IntWithAggregatesFilter<"JobSeekerInfo"> | number
    forWhichJobId?: IntWithAggregatesFilter<"JobSeekerInfo"> | number
    name?: StringWithAggregatesFilter<"JobSeekerInfo"> | string
    email?: StringWithAggregatesFilter<"JobSeekerInfo"> | string
    phone?: StringWithAggregatesFilter<"JobSeekerInfo"> | string
    address?: StringWithAggregatesFilter<"JobSeekerInfo"> | string
    coverletter?: StringWithAggregatesFilter<"JobSeekerInfo"> | string
    role?: StringWithAggregatesFilter<"JobSeekerInfo"> | string
    resume?: JsonNullableWithAggregatesFilter<"JobSeekerInfo">
  }

  export type EmployerInfoWhereInput = {
    AND?: EmployerInfoWhereInput | EmployerInfoWhereInput[]
    OR?: EmployerInfoWhereInput[]
    NOT?: EmployerInfoWhereInput | EmployerInfoWhereInput[]
    id?: IntFilter<"EmployerInfo"> | number
    EmployeruserId?: IntFilter<"EmployerInfo"> | number
    jobPostedId?: IntNullableFilter<"EmployerInfo"> | number | null
    role?: StringFilter<"EmployerInfo"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    jobPosted?: XOR<JobNullableRelationFilter, JobWhereInput> | null
    applications?: ApplicationListRelationFilter
  }

  export type EmployerInfoOrderByWithRelationInput = {
    id?: SortOrder
    EmployeruserId?: SortOrder
    jobPostedId?: SortOrderInput | SortOrder
    role?: SortOrder
    user?: UserOrderByWithRelationInput
    jobPosted?: JobOrderByWithRelationInput
    applications?: ApplicationOrderByRelationAggregateInput
  }

  export type EmployerInfoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EmployerInfoWhereInput | EmployerInfoWhereInput[]
    OR?: EmployerInfoWhereInput[]
    NOT?: EmployerInfoWhereInput | EmployerInfoWhereInput[]
    EmployeruserId?: IntFilter<"EmployerInfo"> | number
    jobPostedId?: IntNullableFilter<"EmployerInfo"> | number | null
    role?: StringFilter<"EmployerInfo"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    jobPosted?: XOR<JobNullableRelationFilter, JobWhereInput> | null
    applications?: ApplicationListRelationFilter
  }, "id">

  export type EmployerInfoOrderByWithAggregationInput = {
    id?: SortOrder
    EmployeruserId?: SortOrder
    jobPostedId?: SortOrderInput | SortOrder
    role?: SortOrder
    _count?: EmployerInfoCountOrderByAggregateInput
    _avg?: EmployerInfoAvgOrderByAggregateInput
    _max?: EmployerInfoMaxOrderByAggregateInput
    _min?: EmployerInfoMinOrderByAggregateInput
    _sum?: EmployerInfoSumOrderByAggregateInput
  }

  export type EmployerInfoScalarWhereWithAggregatesInput = {
    AND?: EmployerInfoScalarWhereWithAggregatesInput | EmployerInfoScalarWhereWithAggregatesInput[]
    OR?: EmployerInfoScalarWhereWithAggregatesInput[]
    NOT?: EmployerInfoScalarWhereWithAggregatesInput | EmployerInfoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"EmployerInfo"> | number
    EmployeruserId?: IntWithAggregatesFilter<"EmployerInfo"> | number
    jobPostedId?: IntNullableWithAggregatesFilter<"EmployerInfo"> | number | null
    role?: StringWithAggregatesFilter<"EmployerInfo"> | string
  }

  export type JobInfoWhereInput = {
    AND?: JobInfoWhereInput | JobInfoWhereInput[]
    OR?: JobInfoWhereInput[]
    NOT?: JobInfoWhereInput | JobInfoWhereInput[]
    id?: IntFilter<"JobInfo"> | number
    jobId?: IntFilter<"JobInfo"> | number
    jobTitle?: StringFilter<"JobInfo"> | string
    job?: XOR<JobRelationFilter, JobWhereInput>
    applications?: ApplicationListRelationFilter
  }

  export type JobInfoOrderByWithRelationInput = {
    id?: SortOrder
    jobId?: SortOrder
    jobTitle?: SortOrder
    job?: JobOrderByWithRelationInput
    applications?: ApplicationOrderByRelationAggregateInput
  }

  export type JobInfoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: JobInfoWhereInput | JobInfoWhereInput[]
    OR?: JobInfoWhereInput[]
    NOT?: JobInfoWhereInput | JobInfoWhereInput[]
    jobId?: IntFilter<"JobInfo"> | number
    jobTitle?: StringFilter<"JobInfo"> | string
    job?: XOR<JobRelationFilter, JobWhereInput>
    applications?: ApplicationListRelationFilter
  }, "id">

  export type JobInfoOrderByWithAggregationInput = {
    id?: SortOrder
    jobId?: SortOrder
    jobTitle?: SortOrder
    _count?: JobInfoCountOrderByAggregateInput
    _avg?: JobInfoAvgOrderByAggregateInput
    _max?: JobInfoMaxOrderByAggregateInput
    _min?: JobInfoMinOrderByAggregateInput
    _sum?: JobInfoSumOrderByAggregateInput
  }

  export type JobInfoScalarWhereWithAggregatesInput = {
    AND?: JobInfoScalarWhereWithAggregatesInput | JobInfoScalarWhereWithAggregatesInput[]
    OR?: JobInfoScalarWhereWithAggregatesInput[]
    NOT?: JobInfoScalarWhereWithAggregatesInput | JobInfoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"JobInfo"> | number
    jobId?: IntWithAggregatesFilter<"JobInfo"> | number
    jobTitle?: StringWithAggregatesFilter<"JobInfo"> | string
  }

  export type UserCreateInput = {
    name: string
    email: string
    phone: string
    address: string
    niches: JsonNullValueInput | InputJsonValue
    password: string
    resume?: NullableJsonNullValueInput | InputJsonValue
    coverletter?: string | null
    role: $Enums.ROLE
    createdAt?: Date | string | null
    jobs?: JobCreateNestedManyWithoutPostedByInput
    JobSeekerInfo?: JobSeekerInfoCreateNestedManyWithoutUserInput
    EmployerInfo?: EmployerInfoCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    phone: string
    address: string
    niches: JsonNullValueInput | InputJsonValue
    password: string
    resume?: NullableJsonNullValueInput | InputJsonValue
    coverletter?: string | null
    role: $Enums.ROLE
    createdAt?: Date | string | null
    jobs?: JobUncheckedCreateNestedManyWithoutPostedByInput
    JobSeekerInfo?: JobSeekerInfoUncheckedCreateNestedManyWithoutUserInput
    EmployerInfo?: EmployerInfoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    niches?: JsonNullValueInput | InputJsonValue
    password?: StringFieldUpdateOperationsInput | string
    resume?: NullableJsonNullValueInput | InputJsonValue
    coverletter?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumROLEFieldUpdateOperationsInput | $Enums.ROLE
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jobs?: JobUpdateManyWithoutPostedByNestedInput
    JobSeekerInfo?: JobSeekerInfoUpdateManyWithoutUserNestedInput
    EmployerInfo?: EmployerInfoUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    niches?: JsonNullValueInput | InputJsonValue
    password?: StringFieldUpdateOperationsInput | string
    resume?: NullableJsonNullValueInput | InputJsonValue
    coverletter?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumROLEFieldUpdateOperationsInput | $Enums.ROLE
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jobs?: JobUncheckedUpdateManyWithoutPostedByNestedInput
    JobSeekerInfo?: JobSeekerInfoUncheckedUpdateManyWithoutUserNestedInput
    EmployerInfo?: EmployerInfoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    email: string
    phone: string
    address: string
    niches: JsonNullValueInput | InputJsonValue
    password: string
    resume?: NullableJsonNullValueInput | InputJsonValue
    coverletter?: string | null
    role: $Enums.ROLE
    createdAt?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    niches?: JsonNullValueInput | InputJsonValue
    password?: StringFieldUpdateOperationsInput | string
    resume?: NullableJsonNullValueInput | InputJsonValue
    coverletter?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumROLEFieldUpdateOperationsInput | $Enums.ROLE
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    niches?: JsonNullValueInput | InputJsonValue
    password?: StringFieldUpdateOperationsInput | string
    resume?: NullableJsonNullValueInput | InputJsonValue
    coverletter?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumROLEFieldUpdateOperationsInput | $Enums.ROLE
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type JobCreateInput = {
    title: string
    jobType: $Enums.JobType
    location: string
    companyName: string
    introduction?: string | null
    responsibilities: string
    qualifications: string
    offers?: string | null
    salary: string
    hiringMultipleCandidates: $Enums.YesNo
    personalWebsite?: NullableJsonNullValueInput | InputJsonValue
    jobNiche: string
    newsLettersSent?: boolean
    jobPostedOn?: Date | string
    postedBy: UserCreateNestedOneWithoutJobsInput
    JobInfo?: JobInfoCreateNestedManyWithoutJobInput
    JobSeekerInfo?: JobSeekerInfoCreateNestedManyWithoutForWhichJobInput
    EmployerInfo?: EmployerInfoCreateNestedManyWithoutJobPostedInput
  }

  export type JobUncheckedCreateInput = {
    id?: number
    title: string
    jobType: $Enums.JobType
    location: string
    companyName: string
    introduction?: string | null
    responsibilities: string
    qualifications: string
    offers?: string | null
    salary: string
    hiringMultipleCandidates: $Enums.YesNo
    personalWebsite?: NullableJsonNullValueInput | InputJsonValue
    jobNiche: string
    newsLettersSent?: boolean
    jobPostedOn?: Date | string
    postedById: number
    JobInfo?: JobInfoUncheckedCreateNestedManyWithoutJobInput
    JobSeekerInfo?: JobSeekerInfoUncheckedCreateNestedManyWithoutForWhichJobInput
    EmployerInfo?: EmployerInfoUncheckedCreateNestedManyWithoutJobPostedInput
  }

  export type JobUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    jobType?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    location?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    responsibilities?: StringFieldUpdateOperationsInput | string
    qualifications?: StringFieldUpdateOperationsInput | string
    offers?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: StringFieldUpdateOperationsInput | string
    hiringMultipleCandidates?: EnumYesNoFieldUpdateOperationsInput | $Enums.YesNo
    personalWebsite?: NullableJsonNullValueInput | InputJsonValue
    jobNiche?: StringFieldUpdateOperationsInput | string
    newsLettersSent?: BoolFieldUpdateOperationsInput | boolean
    jobPostedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    postedBy?: UserUpdateOneRequiredWithoutJobsNestedInput
    JobInfo?: JobInfoUpdateManyWithoutJobNestedInput
    JobSeekerInfo?: JobSeekerInfoUpdateManyWithoutForWhichJobNestedInput
    EmployerInfo?: EmployerInfoUpdateManyWithoutJobPostedNestedInput
  }

  export type JobUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    jobType?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    location?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    responsibilities?: StringFieldUpdateOperationsInput | string
    qualifications?: StringFieldUpdateOperationsInput | string
    offers?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: StringFieldUpdateOperationsInput | string
    hiringMultipleCandidates?: EnumYesNoFieldUpdateOperationsInput | $Enums.YesNo
    personalWebsite?: NullableJsonNullValueInput | InputJsonValue
    jobNiche?: StringFieldUpdateOperationsInput | string
    newsLettersSent?: BoolFieldUpdateOperationsInput | boolean
    jobPostedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    postedById?: IntFieldUpdateOperationsInput | number
    JobInfo?: JobInfoUncheckedUpdateManyWithoutJobNestedInput
    JobSeekerInfo?: JobSeekerInfoUncheckedUpdateManyWithoutForWhichJobNestedInput
    EmployerInfo?: EmployerInfoUncheckedUpdateManyWithoutJobPostedNestedInput
  }

  export type JobCreateManyInput = {
    id?: number
    title: string
    jobType: $Enums.JobType
    location: string
    companyName: string
    introduction?: string | null
    responsibilities: string
    qualifications: string
    offers?: string | null
    salary: string
    hiringMultipleCandidates: $Enums.YesNo
    personalWebsite?: NullableJsonNullValueInput | InputJsonValue
    jobNiche: string
    newsLettersSent?: boolean
    jobPostedOn?: Date | string
    postedById: number
  }

  export type JobUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    jobType?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    location?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    responsibilities?: StringFieldUpdateOperationsInput | string
    qualifications?: StringFieldUpdateOperationsInput | string
    offers?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: StringFieldUpdateOperationsInput | string
    hiringMultipleCandidates?: EnumYesNoFieldUpdateOperationsInput | $Enums.YesNo
    personalWebsite?: NullableJsonNullValueInput | InputJsonValue
    jobNiche?: StringFieldUpdateOperationsInput | string
    newsLettersSent?: BoolFieldUpdateOperationsInput | boolean
    jobPostedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    jobType?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    location?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    responsibilities?: StringFieldUpdateOperationsInput | string
    qualifications?: StringFieldUpdateOperationsInput | string
    offers?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: StringFieldUpdateOperationsInput | string
    hiringMultipleCandidates?: EnumYesNoFieldUpdateOperationsInput | $Enums.YesNo
    personalWebsite?: NullableJsonNullValueInput | InputJsonValue
    jobNiche?: StringFieldUpdateOperationsInput | string
    newsLettersSent?: BoolFieldUpdateOperationsInput | boolean
    jobPostedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    postedById?: IntFieldUpdateOperationsInput | number
  }

  export type ApplicationCreateInput = {
    deletedBy?: NullableJsonNullValueInput | InputJsonValue
    jobSeekerInfo: JobSeekerInfoCreateNestedOneWithoutApplicationsInput
    employerInfo: EmployerInfoCreateNestedOneWithoutApplicationsInput
    jobInfo: JobInfoCreateNestedOneWithoutApplicationsInput
  }

  export type ApplicationUncheckedCreateInput = {
    id?: number
    jobSeekerInfoId: number
    employerInfoId: number
    jobInfoId: number
    deletedBy?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ApplicationUpdateInput = {
    deletedBy?: NullableJsonNullValueInput | InputJsonValue
    jobSeekerInfo?: JobSeekerInfoUpdateOneRequiredWithoutApplicationsNestedInput
    employerInfo?: EmployerInfoUpdateOneRequiredWithoutApplicationsNestedInput
    jobInfo?: JobInfoUpdateOneRequiredWithoutApplicationsNestedInput
  }

  export type ApplicationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobSeekerInfoId?: IntFieldUpdateOperationsInput | number
    employerInfoId?: IntFieldUpdateOperationsInput | number
    jobInfoId?: IntFieldUpdateOperationsInput | number
    deletedBy?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ApplicationCreateManyInput = {
    id?: number
    jobSeekerInfoId: number
    employerInfoId: number
    jobInfoId: number
    deletedBy?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ApplicationUpdateManyMutationInput = {
    deletedBy?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ApplicationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobSeekerInfoId?: IntFieldUpdateOperationsInput | number
    employerInfoId?: IntFieldUpdateOperationsInput | number
    jobInfoId?: IntFieldUpdateOperationsInput | number
    deletedBy?: NullableJsonNullValueInput | InputJsonValue
  }

  export type JobSeekerInfoCreateInput = {
    name: string
    email: string
    phone: string
    address: string
    coverletter: string
    role?: string
    resume?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutJobSeekerInfoInput
    forWhichJob: JobCreateNestedOneWithoutJobSeekerInfoInput
    applications?: ApplicationCreateNestedManyWithoutJobSeekerInfoInput
  }

  export type JobSeekerInfoUncheckedCreateInput = {
    id?: number
    JobSeekeruserId: number
    forWhichJobId: number
    name: string
    email: string
    phone: string
    address: string
    coverletter: string
    role?: string
    resume?: NullableJsonNullValueInput | InputJsonValue
    applications?: ApplicationUncheckedCreateNestedManyWithoutJobSeekerInfoInput
  }

  export type JobSeekerInfoUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    coverletter?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    resume?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutJobSeekerInfoNestedInput
    forWhichJob?: JobUpdateOneRequiredWithoutJobSeekerInfoNestedInput
    applications?: ApplicationUpdateManyWithoutJobSeekerInfoNestedInput
  }

  export type JobSeekerInfoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    JobSeekeruserId?: IntFieldUpdateOperationsInput | number
    forWhichJobId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    coverletter?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    resume?: NullableJsonNullValueInput | InputJsonValue
    applications?: ApplicationUncheckedUpdateManyWithoutJobSeekerInfoNestedInput
  }

  export type JobSeekerInfoCreateManyInput = {
    id?: number
    JobSeekeruserId: number
    forWhichJobId: number
    name: string
    email: string
    phone: string
    address: string
    coverletter: string
    role?: string
    resume?: NullableJsonNullValueInput | InputJsonValue
  }

  export type JobSeekerInfoUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    coverletter?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    resume?: NullableJsonNullValueInput | InputJsonValue
  }

  export type JobSeekerInfoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    JobSeekeruserId?: IntFieldUpdateOperationsInput | number
    forWhichJobId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    coverletter?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    resume?: NullableJsonNullValueInput | InputJsonValue
  }

  export type EmployerInfoCreateInput = {
    role?: string
    user: UserCreateNestedOneWithoutEmployerInfoInput
    jobPosted?: JobCreateNestedOneWithoutEmployerInfoInput
    applications?: ApplicationCreateNestedManyWithoutEmployerInfoInput
  }

  export type EmployerInfoUncheckedCreateInput = {
    id?: number
    EmployeruserId: number
    jobPostedId?: number | null
    role?: string
    applications?: ApplicationUncheckedCreateNestedManyWithoutEmployerInfoInput
  }

  export type EmployerInfoUpdateInput = {
    role?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutEmployerInfoNestedInput
    jobPosted?: JobUpdateOneWithoutEmployerInfoNestedInput
    applications?: ApplicationUpdateManyWithoutEmployerInfoNestedInput
  }

  export type EmployerInfoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    EmployeruserId?: IntFieldUpdateOperationsInput | number
    jobPostedId?: NullableIntFieldUpdateOperationsInput | number | null
    role?: StringFieldUpdateOperationsInput | string
    applications?: ApplicationUncheckedUpdateManyWithoutEmployerInfoNestedInput
  }

  export type EmployerInfoCreateManyInput = {
    id?: number
    EmployeruserId: number
    jobPostedId?: number | null
    role?: string
  }

  export type EmployerInfoUpdateManyMutationInput = {
    role?: StringFieldUpdateOperationsInput | string
  }

  export type EmployerInfoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    EmployeruserId?: IntFieldUpdateOperationsInput | number
    jobPostedId?: NullableIntFieldUpdateOperationsInput | number | null
    role?: StringFieldUpdateOperationsInput | string
  }

  export type JobInfoCreateInput = {
    jobTitle: string
    job: JobCreateNestedOneWithoutJobInfoInput
    applications?: ApplicationCreateNestedManyWithoutJobInfoInput
  }

  export type JobInfoUncheckedCreateInput = {
    id?: number
    jobId: number
    jobTitle: string
    applications?: ApplicationUncheckedCreateNestedManyWithoutJobInfoInput
  }

  export type JobInfoUpdateInput = {
    jobTitle?: StringFieldUpdateOperationsInput | string
    job?: JobUpdateOneRequiredWithoutJobInfoNestedInput
    applications?: ApplicationUpdateManyWithoutJobInfoNestedInput
  }

  export type JobInfoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    jobTitle?: StringFieldUpdateOperationsInput | string
    applications?: ApplicationUncheckedUpdateManyWithoutJobInfoNestedInput
  }

  export type JobInfoCreateManyInput = {
    id?: number
    jobId: number
    jobTitle: string
  }

  export type JobInfoUpdateManyMutationInput = {
    jobTitle?: StringFieldUpdateOperationsInput | string
  }

  export type JobInfoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    jobTitle?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumROLEFilter<$PrismaModel = never> = {
    equals?: $Enums.ROLE | EnumROLEFieldRefInput<$PrismaModel>
    in?: $Enums.ROLE[] | ListEnumROLEFieldRefInput<$PrismaModel>
    notIn?: $Enums.ROLE[] | ListEnumROLEFieldRefInput<$PrismaModel>
    not?: NestedEnumROLEFilter<$PrismaModel> | $Enums.ROLE
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type JobListRelationFilter = {
    every?: JobWhereInput
    some?: JobWhereInput
    none?: JobWhereInput
  }

  export type JobSeekerInfoListRelationFilter = {
    every?: JobSeekerInfoWhereInput
    some?: JobSeekerInfoWhereInput
    none?: JobSeekerInfoWhereInput
  }

  export type EmployerInfoListRelationFilter = {
    every?: EmployerInfoWhereInput
    some?: EmployerInfoWhereInput
    none?: EmployerInfoWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type JobOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobSeekerInfoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmployerInfoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    niches?: SortOrder
    password?: SortOrder
    resume?: SortOrder
    coverletter?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    password?: SortOrder
    coverletter?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    password?: SortOrder
    coverletter?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumROLEWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ROLE | EnumROLEFieldRefInput<$PrismaModel>
    in?: $Enums.ROLE[] | ListEnumROLEFieldRefInput<$PrismaModel>
    notIn?: $Enums.ROLE[] | ListEnumROLEFieldRefInput<$PrismaModel>
    not?: NestedEnumROLEWithAggregatesFilter<$PrismaModel> | $Enums.ROLE
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumROLEFilter<$PrismaModel>
    _max?: NestedEnumROLEFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumJobTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.JobType | EnumJobTypeFieldRefInput<$PrismaModel>
    in?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumJobTypeFilter<$PrismaModel> | $Enums.JobType
  }

  export type EnumYesNoFilter<$PrismaModel = never> = {
    equals?: $Enums.YesNo | EnumYesNoFieldRefInput<$PrismaModel>
    in?: $Enums.YesNo[] | ListEnumYesNoFieldRefInput<$PrismaModel>
    notIn?: $Enums.YesNo[] | ListEnumYesNoFieldRefInput<$PrismaModel>
    not?: NestedEnumYesNoFilter<$PrismaModel> | $Enums.YesNo
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type JobInfoListRelationFilter = {
    every?: JobInfoWhereInput
    some?: JobInfoWhereInput
    none?: JobInfoWhereInput
  }

  export type JobInfoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    jobType?: SortOrder
    location?: SortOrder
    companyName?: SortOrder
    introduction?: SortOrder
    responsibilities?: SortOrder
    qualifications?: SortOrder
    offers?: SortOrder
    salary?: SortOrder
    hiringMultipleCandidates?: SortOrder
    personalWebsite?: SortOrder
    jobNiche?: SortOrder
    newsLettersSent?: SortOrder
    jobPostedOn?: SortOrder
    postedById?: SortOrder
  }

  export type JobAvgOrderByAggregateInput = {
    id?: SortOrder
    postedById?: SortOrder
  }

  export type JobMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    jobType?: SortOrder
    location?: SortOrder
    companyName?: SortOrder
    introduction?: SortOrder
    responsibilities?: SortOrder
    qualifications?: SortOrder
    offers?: SortOrder
    salary?: SortOrder
    hiringMultipleCandidates?: SortOrder
    jobNiche?: SortOrder
    newsLettersSent?: SortOrder
    jobPostedOn?: SortOrder
    postedById?: SortOrder
  }

  export type JobMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    jobType?: SortOrder
    location?: SortOrder
    companyName?: SortOrder
    introduction?: SortOrder
    responsibilities?: SortOrder
    qualifications?: SortOrder
    offers?: SortOrder
    salary?: SortOrder
    hiringMultipleCandidates?: SortOrder
    jobNiche?: SortOrder
    newsLettersSent?: SortOrder
    jobPostedOn?: SortOrder
    postedById?: SortOrder
  }

  export type JobSumOrderByAggregateInput = {
    id?: SortOrder
    postedById?: SortOrder
  }

  export type EnumJobTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobType | EnumJobTypeFieldRefInput<$PrismaModel>
    in?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumJobTypeWithAggregatesFilter<$PrismaModel> | $Enums.JobType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobTypeFilter<$PrismaModel>
    _max?: NestedEnumJobTypeFilter<$PrismaModel>
  }

  export type EnumYesNoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.YesNo | EnumYesNoFieldRefInput<$PrismaModel>
    in?: $Enums.YesNo[] | ListEnumYesNoFieldRefInput<$PrismaModel>
    notIn?: $Enums.YesNo[] | ListEnumYesNoFieldRefInput<$PrismaModel>
    not?: NestedEnumYesNoWithAggregatesFilter<$PrismaModel> | $Enums.YesNo
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumYesNoFilter<$PrismaModel>
    _max?: NestedEnumYesNoFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type JobSeekerInfoRelationFilter = {
    is?: JobSeekerInfoWhereInput
    isNot?: JobSeekerInfoWhereInput
  }

  export type EmployerInfoRelationFilter = {
    is?: EmployerInfoWhereInput
    isNot?: EmployerInfoWhereInput
  }

  export type JobInfoRelationFilter = {
    is?: JobInfoWhereInput
    isNot?: JobInfoWhereInput
  }

  export type ApplicationCountOrderByAggregateInput = {
    id?: SortOrder
    jobSeekerInfoId?: SortOrder
    employerInfoId?: SortOrder
    jobInfoId?: SortOrder
    deletedBy?: SortOrder
  }

  export type ApplicationAvgOrderByAggregateInput = {
    id?: SortOrder
    jobSeekerInfoId?: SortOrder
    employerInfoId?: SortOrder
    jobInfoId?: SortOrder
  }

  export type ApplicationMaxOrderByAggregateInput = {
    id?: SortOrder
    jobSeekerInfoId?: SortOrder
    employerInfoId?: SortOrder
    jobInfoId?: SortOrder
  }

  export type ApplicationMinOrderByAggregateInput = {
    id?: SortOrder
    jobSeekerInfoId?: SortOrder
    employerInfoId?: SortOrder
    jobInfoId?: SortOrder
  }

  export type ApplicationSumOrderByAggregateInput = {
    id?: SortOrder
    jobSeekerInfoId?: SortOrder
    employerInfoId?: SortOrder
    jobInfoId?: SortOrder
  }

  export type JobRelationFilter = {
    is?: JobWhereInput
    isNot?: JobWhereInput
  }

  export type ApplicationListRelationFilter = {
    every?: ApplicationWhereInput
    some?: ApplicationWhereInput
    none?: ApplicationWhereInput
  }

  export type ApplicationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobSeekerInfoCountOrderByAggregateInput = {
    id?: SortOrder
    JobSeekeruserId?: SortOrder
    forWhichJobId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    coverletter?: SortOrder
    role?: SortOrder
    resume?: SortOrder
  }

  export type JobSeekerInfoAvgOrderByAggregateInput = {
    id?: SortOrder
    JobSeekeruserId?: SortOrder
    forWhichJobId?: SortOrder
  }

  export type JobSeekerInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    JobSeekeruserId?: SortOrder
    forWhichJobId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    coverletter?: SortOrder
    role?: SortOrder
  }

  export type JobSeekerInfoMinOrderByAggregateInput = {
    id?: SortOrder
    JobSeekeruserId?: SortOrder
    forWhichJobId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    coverletter?: SortOrder
    role?: SortOrder
  }

  export type JobSeekerInfoSumOrderByAggregateInput = {
    id?: SortOrder
    JobSeekeruserId?: SortOrder
    forWhichJobId?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type JobNullableRelationFilter = {
    is?: JobWhereInput | null
    isNot?: JobWhereInput | null
  }

  export type EmployerInfoCountOrderByAggregateInput = {
    id?: SortOrder
    EmployeruserId?: SortOrder
    jobPostedId?: SortOrder
    role?: SortOrder
  }

  export type EmployerInfoAvgOrderByAggregateInput = {
    id?: SortOrder
    EmployeruserId?: SortOrder
    jobPostedId?: SortOrder
  }

  export type EmployerInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    EmployeruserId?: SortOrder
    jobPostedId?: SortOrder
    role?: SortOrder
  }

  export type EmployerInfoMinOrderByAggregateInput = {
    id?: SortOrder
    EmployeruserId?: SortOrder
    jobPostedId?: SortOrder
    role?: SortOrder
  }

  export type EmployerInfoSumOrderByAggregateInput = {
    id?: SortOrder
    EmployeruserId?: SortOrder
    jobPostedId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type JobInfoCountOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    jobTitle?: SortOrder
  }

  export type JobInfoAvgOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
  }

  export type JobInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    jobTitle?: SortOrder
  }

  export type JobInfoMinOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    jobTitle?: SortOrder
  }

  export type JobInfoSumOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
  }

  export type JobCreateNestedManyWithoutPostedByInput = {
    create?: XOR<JobCreateWithoutPostedByInput, JobUncheckedCreateWithoutPostedByInput> | JobCreateWithoutPostedByInput[] | JobUncheckedCreateWithoutPostedByInput[]
    connectOrCreate?: JobCreateOrConnectWithoutPostedByInput | JobCreateOrConnectWithoutPostedByInput[]
    createMany?: JobCreateManyPostedByInputEnvelope
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type JobSeekerInfoCreateNestedManyWithoutUserInput = {
    create?: XOR<JobSeekerInfoCreateWithoutUserInput, JobSeekerInfoUncheckedCreateWithoutUserInput> | JobSeekerInfoCreateWithoutUserInput[] | JobSeekerInfoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JobSeekerInfoCreateOrConnectWithoutUserInput | JobSeekerInfoCreateOrConnectWithoutUserInput[]
    createMany?: JobSeekerInfoCreateManyUserInputEnvelope
    connect?: JobSeekerInfoWhereUniqueInput | JobSeekerInfoWhereUniqueInput[]
  }

  export type EmployerInfoCreateNestedManyWithoutUserInput = {
    create?: XOR<EmployerInfoCreateWithoutUserInput, EmployerInfoUncheckedCreateWithoutUserInput> | EmployerInfoCreateWithoutUserInput[] | EmployerInfoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmployerInfoCreateOrConnectWithoutUserInput | EmployerInfoCreateOrConnectWithoutUserInput[]
    createMany?: EmployerInfoCreateManyUserInputEnvelope
    connect?: EmployerInfoWhereUniqueInput | EmployerInfoWhereUniqueInput[]
  }

  export type JobUncheckedCreateNestedManyWithoutPostedByInput = {
    create?: XOR<JobCreateWithoutPostedByInput, JobUncheckedCreateWithoutPostedByInput> | JobCreateWithoutPostedByInput[] | JobUncheckedCreateWithoutPostedByInput[]
    connectOrCreate?: JobCreateOrConnectWithoutPostedByInput | JobCreateOrConnectWithoutPostedByInput[]
    createMany?: JobCreateManyPostedByInputEnvelope
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type JobSeekerInfoUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<JobSeekerInfoCreateWithoutUserInput, JobSeekerInfoUncheckedCreateWithoutUserInput> | JobSeekerInfoCreateWithoutUserInput[] | JobSeekerInfoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JobSeekerInfoCreateOrConnectWithoutUserInput | JobSeekerInfoCreateOrConnectWithoutUserInput[]
    createMany?: JobSeekerInfoCreateManyUserInputEnvelope
    connect?: JobSeekerInfoWhereUniqueInput | JobSeekerInfoWhereUniqueInput[]
  }

  export type EmployerInfoUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EmployerInfoCreateWithoutUserInput, EmployerInfoUncheckedCreateWithoutUserInput> | EmployerInfoCreateWithoutUserInput[] | EmployerInfoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmployerInfoCreateOrConnectWithoutUserInput | EmployerInfoCreateOrConnectWithoutUserInput[]
    createMany?: EmployerInfoCreateManyUserInputEnvelope
    connect?: EmployerInfoWhereUniqueInput | EmployerInfoWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumROLEFieldUpdateOperationsInput = {
    set?: $Enums.ROLE
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type JobUpdateManyWithoutPostedByNestedInput = {
    create?: XOR<JobCreateWithoutPostedByInput, JobUncheckedCreateWithoutPostedByInput> | JobCreateWithoutPostedByInput[] | JobUncheckedCreateWithoutPostedByInput[]
    connectOrCreate?: JobCreateOrConnectWithoutPostedByInput | JobCreateOrConnectWithoutPostedByInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutPostedByInput | JobUpsertWithWhereUniqueWithoutPostedByInput[]
    createMany?: JobCreateManyPostedByInputEnvelope
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutPostedByInput | JobUpdateWithWhereUniqueWithoutPostedByInput[]
    updateMany?: JobUpdateManyWithWhereWithoutPostedByInput | JobUpdateManyWithWhereWithoutPostedByInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type JobSeekerInfoUpdateManyWithoutUserNestedInput = {
    create?: XOR<JobSeekerInfoCreateWithoutUserInput, JobSeekerInfoUncheckedCreateWithoutUserInput> | JobSeekerInfoCreateWithoutUserInput[] | JobSeekerInfoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JobSeekerInfoCreateOrConnectWithoutUserInput | JobSeekerInfoCreateOrConnectWithoutUserInput[]
    upsert?: JobSeekerInfoUpsertWithWhereUniqueWithoutUserInput | JobSeekerInfoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: JobSeekerInfoCreateManyUserInputEnvelope
    set?: JobSeekerInfoWhereUniqueInput | JobSeekerInfoWhereUniqueInput[]
    disconnect?: JobSeekerInfoWhereUniqueInput | JobSeekerInfoWhereUniqueInput[]
    delete?: JobSeekerInfoWhereUniqueInput | JobSeekerInfoWhereUniqueInput[]
    connect?: JobSeekerInfoWhereUniqueInput | JobSeekerInfoWhereUniqueInput[]
    update?: JobSeekerInfoUpdateWithWhereUniqueWithoutUserInput | JobSeekerInfoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: JobSeekerInfoUpdateManyWithWhereWithoutUserInput | JobSeekerInfoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: JobSeekerInfoScalarWhereInput | JobSeekerInfoScalarWhereInput[]
  }

  export type EmployerInfoUpdateManyWithoutUserNestedInput = {
    create?: XOR<EmployerInfoCreateWithoutUserInput, EmployerInfoUncheckedCreateWithoutUserInput> | EmployerInfoCreateWithoutUserInput[] | EmployerInfoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmployerInfoCreateOrConnectWithoutUserInput | EmployerInfoCreateOrConnectWithoutUserInput[]
    upsert?: EmployerInfoUpsertWithWhereUniqueWithoutUserInput | EmployerInfoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EmployerInfoCreateManyUserInputEnvelope
    set?: EmployerInfoWhereUniqueInput | EmployerInfoWhereUniqueInput[]
    disconnect?: EmployerInfoWhereUniqueInput | EmployerInfoWhereUniqueInput[]
    delete?: EmployerInfoWhereUniqueInput | EmployerInfoWhereUniqueInput[]
    connect?: EmployerInfoWhereUniqueInput | EmployerInfoWhereUniqueInput[]
    update?: EmployerInfoUpdateWithWhereUniqueWithoutUserInput | EmployerInfoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EmployerInfoUpdateManyWithWhereWithoutUserInput | EmployerInfoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EmployerInfoScalarWhereInput | EmployerInfoScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type JobUncheckedUpdateManyWithoutPostedByNestedInput = {
    create?: XOR<JobCreateWithoutPostedByInput, JobUncheckedCreateWithoutPostedByInput> | JobCreateWithoutPostedByInput[] | JobUncheckedCreateWithoutPostedByInput[]
    connectOrCreate?: JobCreateOrConnectWithoutPostedByInput | JobCreateOrConnectWithoutPostedByInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutPostedByInput | JobUpsertWithWhereUniqueWithoutPostedByInput[]
    createMany?: JobCreateManyPostedByInputEnvelope
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutPostedByInput | JobUpdateWithWhereUniqueWithoutPostedByInput[]
    updateMany?: JobUpdateManyWithWhereWithoutPostedByInput | JobUpdateManyWithWhereWithoutPostedByInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type JobSeekerInfoUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<JobSeekerInfoCreateWithoutUserInput, JobSeekerInfoUncheckedCreateWithoutUserInput> | JobSeekerInfoCreateWithoutUserInput[] | JobSeekerInfoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JobSeekerInfoCreateOrConnectWithoutUserInput | JobSeekerInfoCreateOrConnectWithoutUserInput[]
    upsert?: JobSeekerInfoUpsertWithWhereUniqueWithoutUserInput | JobSeekerInfoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: JobSeekerInfoCreateManyUserInputEnvelope
    set?: JobSeekerInfoWhereUniqueInput | JobSeekerInfoWhereUniqueInput[]
    disconnect?: JobSeekerInfoWhereUniqueInput | JobSeekerInfoWhereUniqueInput[]
    delete?: JobSeekerInfoWhereUniqueInput | JobSeekerInfoWhereUniqueInput[]
    connect?: JobSeekerInfoWhereUniqueInput | JobSeekerInfoWhereUniqueInput[]
    update?: JobSeekerInfoUpdateWithWhereUniqueWithoutUserInput | JobSeekerInfoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: JobSeekerInfoUpdateManyWithWhereWithoutUserInput | JobSeekerInfoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: JobSeekerInfoScalarWhereInput | JobSeekerInfoScalarWhereInput[]
  }

  export type EmployerInfoUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EmployerInfoCreateWithoutUserInput, EmployerInfoUncheckedCreateWithoutUserInput> | EmployerInfoCreateWithoutUserInput[] | EmployerInfoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EmployerInfoCreateOrConnectWithoutUserInput | EmployerInfoCreateOrConnectWithoutUserInput[]
    upsert?: EmployerInfoUpsertWithWhereUniqueWithoutUserInput | EmployerInfoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EmployerInfoCreateManyUserInputEnvelope
    set?: EmployerInfoWhereUniqueInput | EmployerInfoWhereUniqueInput[]
    disconnect?: EmployerInfoWhereUniqueInput | EmployerInfoWhereUniqueInput[]
    delete?: EmployerInfoWhereUniqueInput | EmployerInfoWhereUniqueInput[]
    connect?: EmployerInfoWhereUniqueInput | EmployerInfoWhereUniqueInput[]
    update?: EmployerInfoUpdateWithWhereUniqueWithoutUserInput | EmployerInfoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EmployerInfoUpdateManyWithWhereWithoutUserInput | EmployerInfoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EmployerInfoScalarWhereInput | EmployerInfoScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutJobsInput = {
    create?: XOR<UserCreateWithoutJobsInput, UserUncheckedCreateWithoutJobsInput>
    connectOrCreate?: UserCreateOrConnectWithoutJobsInput
    connect?: UserWhereUniqueInput
  }

  export type JobInfoCreateNestedManyWithoutJobInput = {
    create?: XOR<JobInfoCreateWithoutJobInput, JobInfoUncheckedCreateWithoutJobInput> | JobInfoCreateWithoutJobInput[] | JobInfoUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobInfoCreateOrConnectWithoutJobInput | JobInfoCreateOrConnectWithoutJobInput[]
    createMany?: JobInfoCreateManyJobInputEnvelope
    connect?: JobInfoWhereUniqueInput | JobInfoWhereUniqueInput[]
  }

  export type JobSeekerInfoCreateNestedManyWithoutForWhichJobInput = {
    create?: XOR<JobSeekerInfoCreateWithoutForWhichJobInput, JobSeekerInfoUncheckedCreateWithoutForWhichJobInput> | JobSeekerInfoCreateWithoutForWhichJobInput[] | JobSeekerInfoUncheckedCreateWithoutForWhichJobInput[]
    connectOrCreate?: JobSeekerInfoCreateOrConnectWithoutForWhichJobInput | JobSeekerInfoCreateOrConnectWithoutForWhichJobInput[]
    createMany?: JobSeekerInfoCreateManyForWhichJobInputEnvelope
    connect?: JobSeekerInfoWhereUniqueInput | JobSeekerInfoWhereUniqueInput[]
  }

  export type EmployerInfoCreateNestedManyWithoutJobPostedInput = {
    create?: XOR<EmployerInfoCreateWithoutJobPostedInput, EmployerInfoUncheckedCreateWithoutJobPostedInput> | EmployerInfoCreateWithoutJobPostedInput[] | EmployerInfoUncheckedCreateWithoutJobPostedInput[]
    connectOrCreate?: EmployerInfoCreateOrConnectWithoutJobPostedInput | EmployerInfoCreateOrConnectWithoutJobPostedInput[]
    createMany?: EmployerInfoCreateManyJobPostedInputEnvelope
    connect?: EmployerInfoWhereUniqueInput | EmployerInfoWhereUniqueInput[]
  }

  export type JobInfoUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<JobInfoCreateWithoutJobInput, JobInfoUncheckedCreateWithoutJobInput> | JobInfoCreateWithoutJobInput[] | JobInfoUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobInfoCreateOrConnectWithoutJobInput | JobInfoCreateOrConnectWithoutJobInput[]
    createMany?: JobInfoCreateManyJobInputEnvelope
    connect?: JobInfoWhereUniqueInput | JobInfoWhereUniqueInput[]
  }

  export type JobSeekerInfoUncheckedCreateNestedManyWithoutForWhichJobInput = {
    create?: XOR<JobSeekerInfoCreateWithoutForWhichJobInput, JobSeekerInfoUncheckedCreateWithoutForWhichJobInput> | JobSeekerInfoCreateWithoutForWhichJobInput[] | JobSeekerInfoUncheckedCreateWithoutForWhichJobInput[]
    connectOrCreate?: JobSeekerInfoCreateOrConnectWithoutForWhichJobInput | JobSeekerInfoCreateOrConnectWithoutForWhichJobInput[]
    createMany?: JobSeekerInfoCreateManyForWhichJobInputEnvelope
    connect?: JobSeekerInfoWhereUniqueInput | JobSeekerInfoWhereUniqueInput[]
  }

  export type EmployerInfoUncheckedCreateNestedManyWithoutJobPostedInput = {
    create?: XOR<EmployerInfoCreateWithoutJobPostedInput, EmployerInfoUncheckedCreateWithoutJobPostedInput> | EmployerInfoCreateWithoutJobPostedInput[] | EmployerInfoUncheckedCreateWithoutJobPostedInput[]
    connectOrCreate?: EmployerInfoCreateOrConnectWithoutJobPostedInput | EmployerInfoCreateOrConnectWithoutJobPostedInput[]
    createMany?: EmployerInfoCreateManyJobPostedInputEnvelope
    connect?: EmployerInfoWhereUniqueInput | EmployerInfoWhereUniqueInput[]
  }

  export type EnumJobTypeFieldUpdateOperationsInput = {
    set?: $Enums.JobType
  }

  export type EnumYesNoFieldUpdateOperationsInput = {
    set?: $Enums.YesNo
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutJobsNestedInput = {
    create?: XOR<UserCreateWithoutJobsInput, UserUncheckedCreateWithoutJobsInput>
    connectOrCreate?: UserCreateOrConnectWithoutJobsInput
    upsert?: UserUpsertWithoutJobsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutJobsInput, UserUpdateWithoutJobsInput>, UserUncheckedUpdateWithoutJobsInput>
  }

  export type JobInfoUpdateManyWithoutJobNestedInput = {
    create?: XOR<JobInfoCreateWithoutJobInput, JobInfoUncheckedCreateWithoutJobInput> | JobInfoCreateWithoutJobInput[] | JobInfoUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobInfoCreateOrConnectWithoutJobInput | JobInfoCreateOrConnectWithoutJobInput[]
    upsert?: JobInfoUpsertWithWhereUniqueWithoutJobInput | JobInfoUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: JobInfoCreateManyJobInputEnvelope
    set?: JobInfoWhereUniqueInput | JobInfoWhereUniqueInput[]
    disconnect?: JobInfoWhereUniqueInput | JobInfoWhereUniqueInput[]
    delete?: JobInfoWhereUniqueInput | JobInfoWhereUniqueInput[]
    connect?: JobInfoWhereUniqueInput | JobInfoWhereUniqueInput[]
    update?: JobInfoUpdateWithWhereUniqueWithoutJobInput | JobInfoUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: JobInfoUpdateManyWithWhereWithoutJobInput | JobInfoUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: JobInfoScalarWhereInput | JobInfoScalarWhereInput[]
  }

  export type JobSeekerInfoUpdateManyWithoutForWhichJobNestedInput = {
    create?: XOR<JobSeekerInfoCreateWithoutForWhichJobInput, JobSeekerInfoUncheckedCreateWithoutForWhichJobInput> | JobSeekerInfoCreateWithoutForWhichJobInput[] | JobSeekerInfoUncheckedCreateWithoutForWhichJobInput[]
    connectOrCreate?: JobSeekerInfoCreateOrConnectWithoutForWhichJobInput | JobSeekerInfoCreateOrConnectWithoutForWhichJobInput[]
    upsert?: JobSeekerInfoUpsertWithWhereUniqueWithoutForWhichJobInput | JobSeekerInfoUpsertWithWhereUniqueWithoutForWhichJobInput[]
    createMany?: JobSeekerInfoCreateManyForWhichJobInputEnvelope
    set?: JobSeekerInfoWhereUniqueInput | JobSeekerInfoWhereUniqueInput[]
    disconnect?: JobSeekerInfoWhereUniqueInput | JobSeekerInfoWhereUniqueInput[]
    delete?: JobSeekerInfoWhereUniqueInput | JobSeekerInfoWhereUniqueInput[]
    connect?: JobSeekerInfoWhereUniqueInput | JobSeekerInfoWhereUniqueInput[]
    update?: JobSeekerInfoUpdateWithWhereUniqueWithoutForWhichJobInput | JobSeekerInfoUpdateWithWhereUniqueWithoutForWhichJobInput[]
    updateMany?: JobSeekerInfoUpdateManyWithWhereWithoutForWhichJobInput | JobSeekerInfoUpdateManyWithWhereWithoutForWhichJobInput[]
    deleteMany?: JobSeekerInfoScalarWhereInput | JobSeekerInfoScalarWhereInput[]
  }

  export type EmployerInfoUpdateManyWithoutJobPostedNestedInput = {
    create?: XOR<EmployerInfoCreateWithoutJobPostedInput, EmployerInfoUncheckedCreateWithoutJobPostedInput> | EmployerInfoCreateWithoutJobPostedInput[] | EmployerInfoUncheckedCreateWithoutJobPostedInput[]
    connectOrCreate?: EmployerInfoCreateOrConnectWithoutJobPostedInput | EmployerInfoCreateOrConnectWithoutJobPostedInput[]
    upsert?: EmployerInfoUpsertWithWhereUniqueWithoutJobPostedInput | EmployerInfoUpsertWithWhereUniqueWithoutJobPostedInput[]
    createMany?: EmployerInfoCreateManyJobPostedInputEnvelope
    set?: EmployerInfoWhereUniqueInput | EmployerInfoWhereUniqueInput[]
    disconnect?: EmployerInfoWhereUniqueInput | EmployerInfoWhereUniqueInput[]
    delete?: EmployerInfoWhereUniqueInput | EmployerInfoWhereUniqueInput[]
    connect?: EmployerInfoWhereUniqueInput | EmployerInfoWhereUniqueInput[]
    update?: EmployerInfoUpdateWithWhereUniqueWithoutJobPostedInput | EmployerInfoUpdateWithWhereUniqueWithoutJobPostedInput[]
    updateMany?: EmployerInfoUpdateManyWithWhereWithoutJobPostedInput | EmployerInfoUpdateManyWithWhereWithoutJobPostedInput[]
    deleteMany?: EmployerInfoScalarWhereInput | EmployerInfoScalarWhereInput[]
  }

  export type JobInfoUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<JobInfoCreateWithoutJobInput, JobInfoUncheckedCreateWithoutJobInput> | JobInfoCreateWithoutJobInput[] | JobInfoUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobInfoCreateOrConnectWithoutJobInput | JobInfoCreateOrConnectWithoutJobInput[]
    upsert?: JobInfoUpsertWithWhereUniqueWithoutJobInput | JobInfoUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: JobInfoCreateManyJobInputEnvelope
    set?: JobInfoWhereUniqueInput | JobInfoWhereUniqueInput[]
    disconnect?: JobInfoWhereUniqueInput | JobInfoWhereUniqueInput[]
    delete?: JobInfoWhereUniqueInput | JobInfoWhereUniqueInput[]
    connect?: JobInfoWhereUniqueInput | JobInfoWhereUniqueInput[]
    update?: JobInfoUpdateWithWhereUniqueWithoutJobInput | JobInfoUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: JobInfoUpdateManyWithWhereWithoutJobInput | JobInfoUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: JobInfoScalarWhereInput | JobInfoScalarWhereInput[]
  }

  export type JobSeekerInfoUncheckedUpdateManyWithoutForWhichJobNestedInput = {
    create?: XOR<JobSeekerInfoCreateWithoutForWhichJobInput, JobSeekerInfoUncheckedCreateWithoutForWhichJobInput> | JobSeekerInfoCreateWithoutForWhichJobInput[] | JobSeekerInfoUncheckedCreateWithoutForWhichJobInput[]
    connectOrCreate?: JobSeekerInfoCreateOrConnectWithoutForWhichJobInput | JobSeekerInfoCreateOrConnectWithoutForWhichJobInput[]
    upsert?: JobSeekerInfoUpsertWithWhereUniqueWithoutForWhichJobInput | JobSeekerInfoUpsertWithWhereUniqueWithoutForWhichJobInput[]
    createMany?: JobSeekerInfoCreateManyForWhichJobInputEnvelope
    set?: JobSeekerInfoWhereUniqueInput | JobSeekerInfoWhereUniqueInput[]
    disconnect?: JobSeekerInfoWhereUniqueInput | JobSeekerInfoWhereUniqueInput[]
    delete?: JobSeekerInfoWhereUniqueInput | JobSeekerInfoWhereUniqueInput[]
    connect?: JobSeekerInfoWhereUniqueInput | JobSeekerInfoWhereUniqueInput[]
    update?: JobSeekerInfoUpdateWithWhereUniqueWithoutForWhichJobInput | JobSeekerInfoUpdateWithWhereUniqueWithoutForWhichJobInput[]
    updateMany?: JobSeekerInfoUpdateManyWithWhereWithoutForWhichJobInput | JobSeekerInfoUpdateManyWithWhereWithoutForWhichJobInput[]
    deleteMany?: JobSeekerInfoScalarWhereInput | JobSeekerInfoScalarWhereInput[]
  }

  export type EmployerInfoUncheckedUpdateManyWithoutJobPostedNestedInput = {
    create?: XOR<EmployerInfoCreateWithoutJobPostedInput, EmployerInfoUncheckedCreateWithoutJobPostedInput> | EmployerInfoCreateWithoutJobPostedInput[] | EmployerInfoUncheckedCreateWithoutJobPostedInput[]
    connectOrCreate?: EmployerInfoCreateOrConnectWithoutJobPostedInput | EmployerInfoCreateOrConnectWithoutJobPostedInput[]
    upsert?: EmployerInfoUpsertWithWhereUniqueWithoutJobPostedInput | EmployerInfoUpsertWithWhereUniqueWithoutJobPostedInput[]
    createMany?: EmployerInfoCreateManyJobPostedInputEnvelope
    set?: EmployerInfoWhereUniqueInput | EmployerInfoWhereUniqueInput[]
    disconnect?: EmployerInfoWhereUniqueInput | EmployerInfoWhereUniqueInput[]
    delete?: EmployerInfoWhereUniqueInput | EmployerInfoWhereUniqueInput[]
    connect?: EmployerInfoWhereUniqueInput | EmployerInfoWhereUniqueInput[]
    update?: EmployerInfoUpdateWithWhereUniqueWithoutJobPostedInput | EmployerInfoUpdateWithWhereUniqueWithoutJobPostedInput[]
    updateMany?: EmployerInfoUpdateManyWithWhereWithoutJobPostedInput | EmployerInfoUpdateManyWithWhereWithoutJobPostedInput[]
    deleteMany?: EmployerInfoScalarWhereInput | EmployerInfoScalarWhereInput[]
  }

  export type JobSeekerInfoCreateNestedOneWithoutApplicationsInput = {
    create?: XOR<JobSeekerInfoCreateWithoutApplicationsInput, JobSeekerInfoUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: JobSeekerInfoCreateOrConnectWithoutApplicationsInput
    connect?: JobSeekerInfoWhereUniqueInput
  }

  export type EmployerInfoCreateNestedOneWithoutApplicationsInput = {
    create?: XOR<EmployerInfoCreateWithoutApplicationsInput, EmployerInfoUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: EmployerInfoCreateOrConnectWithoutApplicationsInput
    connect?: EmployerInfoWhereUniqueInput
  }

  export type JobInfoCreateNestedOneWithoutApplicationsInput = {
    create?: XOR<JobInfoCreateWithoutApplicationsInput, JobInfoUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: JobInfoCreateOrConnectWithoutApplicationsInput
    connect?: JobInfoWhereUniqueInput
  }

  export type JobSeekerInfoUpdateOneRequiredWithoutApplicationsNestedInput = {
    create?: XOR<JobSeekerInfoCreateWithoutApplicationsInput, JobSeekerInfoUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: JobSeekerInfoCreateOrConnectWithoutApplicationsInput
    upsert?: JobSeekerInfoUpsertWithoutApplicationsInput
    connect?: JobSeekerInfoWhereUniqueInput
    update?: XOR<XOR<JobSeekerInfoUpdateToOneWithWhereWithoutApplicationsInput, JobSeekerInfoUpdateWithoutApplicationsInput>, JobSeekerInfoUncheckedUpdateWithoutApplicationsInput>
  }

  export type EmployerInfoUpdateOneRequiredWithoutApplicationsNestedInput = {
    create?: XOR<EmployerInfoCreateWithoutApplicationsInput, EmployerInfoUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: EmployerInfoCreateOrConnectWithoutApplicationsInput
    upsert?: EmployerInfoUpsertWithoutApplicationsInput
    connect?: EmployerInfoWhereUniqueInput
    update?: XOR<XOR<EmployerInfoUpdateToOneWithWhereWithoutApplicationsInput, EmployerInfoUpdateWithoutApplicationsInput>, EmployerInfoUncheckedUpdateWithoutApplicationsInput>
  }

  export type JobInfoUpdateOneRequiredWithoutApplicationsNestedInput = {
    create?: XOR<JobInfoCreateWithoutApplicationsInput, JobInfoUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: JobInfoCreateOrConnectWithoutApplicationsInput
    upsert?: JobInfoUpsertWithoutApplicationsInput
    connect?: JobInfoWhereUniqueInput
    update?: XOR<XOR<JobInfoUpdateToOneWithWhereWithoutApplicationsInput, JobInfoUpdateWithoutApplicationsInput>, JobInfoUncheckedUpdateWithoutApplicationsInput>
  }

  export type UserCreateNestedOneWithoutJobSeekerInfoInput = {
    create?: XOR<UserCreateWithoutJobSeekerInfoInput, UserUncheckedCreateWithoutJobSeekerInfoInput>
    connectOrCreate?: UserCreateOrConnectWithoutJobSeekerInfoInput
    connect?: UserWhereUniqueInput
  }

  export type JobCreateNestedOneWithoutJobSeekerInfoInput = {
    create?: XOR<JobCreateWithoutJobSeekerInfoInput, JobUncheckedCreateWithoutJobSeekerInfoInput>
    connectOrCreate?: JobCreateOrConnectWithoutJobSeekerInfoInput
    connect?: JobWhereUniqueInput
  }

  export type ApplicationCreateNestedManyWithoutJobSeekerInfoInput = {
    create?: XOR<ApplicationCreateWithoutJobSeekerInfoInput, ApplicationUncheckedCreateWithoutJobSeekerInfoInput> | ApplicationCreateWithoutJobSeekerInfoInput[] | ApplicationUncheckedCreateWithoutJobSeekerInfoInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutJobSeekerInfoInput | ApplicationCreateOrConnectWithoutJobSeekerInfoInput[]
    createMany?: ApplicationCreateManyJobSeekerInfoInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type ApplicationUncheckedCreateNestedManyWithoutJobSeekerInfoInput = {
    create?: XOR<ApplicationCreateWithoutJobSeekerInfoInput, ApplicationUncheckedCreateWithoutJobSeekerInfoInput> | ApplicationCreateWithoutJobSeekerInfoInput[] | ApplicationUncheckedCreateWithoutJobSeekerInfoInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutJobSeekerInfoInput | ApplicationCreateOrConnectWithoutJobSeekerInfoInput[]
    createMany?: ApplicationCreateManyJobSeekerInfoInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutJobSeekerInfoNestedInput = {
    create?: XOR<UserCreateWithoutJobSeekerInfoInput, UserUncheckedCreateWithoutJobSeekerInfoInput>
    connectOrCreate?: UserCreateOrConnectWithoutJobSeekerInfoInput
    upsert?: UserUpsertWithoutJobSeekerInfoInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutJobSeekerInfoInput, UserUpdateWithoutJobSeekerInfoInput>, UserUncheckedUpdateWithoutJobSeekerInfoInput>
  }

  export type JobUpdateOneRequiredWithoutJobSeekerInfoNestedInput = {
    create?: XOR<JobCreateWithoutJobSeekerInfoInput, JobUncheckedCreateWithoutJobSeekerInfoInput>
    connectOrCreate?: JobCreateOrConnectWithoutJobSeekerInfoInput
    upsert?: JobUpsertWithoutJobSeekerInfoInput
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutJobSeekerInfoInput, JobUpdateWithoutJobSeekerInfoInput>, JobUncheckedUpdateWithoutJobSeekerInfoInput>
  }

  export type ApplicationUpdateManyWithoutJobSeekerInfoNestedInput = {
    create?: XOR<ApplicationCreateWithoutJobSeekerInfoInput, ApplicationUncheckedCreateWithoutJobSeekerInfoInput> | ApplicationCreateWithoutJobSeekerInfoInput[] | ApplicationUncheckedCreateWithoutJobSeekerInfoInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutJobSeekerInfoInput | ApplicationCreateOrConnectWithoutJobSeekerInfoInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutJobSeekerInfoInput | ApplicationUpsertWithWhereUniqueWithoutJobSeekerInfoInput[]
    createMany?: ApplicationCreateManyJobSeekerInfoInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutJobSeekerInfoInput | ApplicationUpdateWithWhereUniqueWithoutJobSeekerInfoInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutJobSeekerInfoInput | ApplicationUpdateManyWithWhereWithoutJobSeekerInfoInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type ApplicationUncheckedUpdateManyWithoutJobSeekerInfoNestedInput = {
    create?: XOR<ApplicationCreateWithoutJobSeekerInfoInput, ApplicationUncheckedCreateWithoutJobSeekerInfoInput> | ApplicationCreateWithoutJobSeekerInfoInput[] | ApplicationUncheckedCreateWithoutJobSeekerInfoInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutJobSeekerInfoInput | ApplicationCreateOrConnectWithoutJobSeekerInfoInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutJobSeekerInfoInput | ApplicationUpsertWithWhereUniqueWithoutJobSeekerInfoInput[]
    createMany?: ApplicationCreateManyJobSeekerInfoInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutJobSeekerInfoInput | ApplicationUpdateWithWhereUniqueWithoutJobSeekerInfoInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutJobSeekerInfoInput | ApplicationUpdateManyWithWhereWithoutJobSeekerInfoInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutEmployerInfoInput = {
    create?: XOR<UserCreateWithoutEmployerInfoInput, UserUncheckedCreateWithoutEmployerInfoInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmployerInfoInput
    connect?: UserWhereUniqueInput
  }

  export type JobCreateNestedOneWithoutEmployerInfoInput = {
    create?: XOR<JobCreateWithoutEmployerInfoInput, JobUncheckedCreateWithoutEmployerInfoInput>
    connectOrCreate?: JobCreateOrConnectWithoutEmployerInfoInput
    connect?: JobWhereUniqueInput
  }

  export type ApplicationCreateNestedManyWithoutEmployerInfoInput = {
    create?: XOR<ApplicationCreateWithoutEmployerInfoInput, ApplicationUncheckedCreateWithoutEmployerInfoInput> | ApplicationCreateWithoutEmployerInfoInput[] | ApplicationUncheckedCreateWithoutEmployerInfoInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutEmployerInfoInput | ApplicationCreateOrConnectWithoutEmployerInfoInput[]
    createMany?: ApplicationCreateManyEmployerInfoInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type ApplicationUncheckedCreateNestedManyWithoutEmployerInfoInput = {
    create?: XOR<ApplicationCreateWithoutEmployerInfoInput, ApplicationUncheckedCreateWithoutEmployerInfoInput> | ApplicationCreateWithoutEmployerInfoInput[] | ApplicationUncheckedCreateWithoutEmployerInfoInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutEmployerInfoInput | ApplicationCreateOrConnectWithoutEmployerInfoInput[]
    createMany?: ApplicationCreateManyEmployerInfoInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutEmployerInfoNestedInput = {
    create?: XOR<UserCreateWithoutEmployerInfoInput, UserUncheckedCreateWithoutEmployerInfoInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmployerInfoInput
    upsert?: UserUpsertWithoutEmployerInfoInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEmployerInfoInput, UserUpdateWithoutEmployerInfoInput>, UserUncheckedUpdateWithoutEmployerInfoInput>
  }

  export type JobUpdateOneWithoutEmployerInfoNestedInput = {
    create?: XOR<JobCreateWithoutEmployerInfoInput, JobUncheckedCreateWithoutEmployerInfoInput>
    connectOrCreate?: JobCreateOrConnectWithoutEmployerInfoInput
    upsert?: JobUpsertWithoutEmployerInfoInput
    disconnect?: JobWhereInput | boolean
    delete?: JobWhereInput | boolean
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutEmployerInfoInput, JobUpdateWithoutEmployerInfoInput>, JobUncheckedUpdateWithoutEmployerInfoInput>
  }

  export type ApplicationUpdateManyWithoutEmployerInfoNestedInput = {
    create?: XOR<ApplicationCreateWithoutEmployerInfoInput, ApplicationUncheckedCreateWithoutEmployerInfoInput> | ApplicationCreateWithoutEmployerInfoInput[] | ApplicationUncheckedCreateWithoutEmployerInfoInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutEmployerInfoInput | ApplicationCreateOrConnectWithoutEmployerInfoInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutEmployerInfoInput | ApplicationUpsertWithWhereUniqueWithoutEmployerInfoInput[]
    createMany?: ApplicationCreateManyEmployerInfoInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutEmployerInfoInput | ApplicationUpdateWithWhereUniqueWithoutEmployerInfoInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutEmployerInfoInput | ApplicationUpdateManyWithWhereWithoutEmployerInfoInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ApplicationUncheckedUpdateManyWithoutEmployerInfoNestedInput = {
    create?: XOR<ApplicationCreateWithoutEmployerInfoInput, ApplicationUncheckedCreateWithoutEmployerInfoInput> | ApplicationCreateWithoutEmployerInfoInput[] | ApplicationUncheckedCreateWithoutEmployerInfoInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutEmployerInfoInput | ApplicationCreateOrConnectWithoutEmployerInfoInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutEmployerInfoInput | ApplicationUpsertWithWhereUniqueWithoutEmployerInfoInput[]
    createMany?: ApplicationCreateManyEmployerInfoInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutEmployerInfoInput | ApplicationUpdateWithWhereUniqueWithoutEmployerInfoInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutEmployerInfoInput | ApplicationUpdateManyWithWhereWithoutEmployerInfoInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type JobCreateNestedOneWithoutJobInfoInput = {
    create?: XOR<JobCreateWithoutJobInfoInput, JobUncheckedCreateWithoutJobInfoInput>
    connectOrCreate?: JobCreateOrConnectWithoutJobInfoInput
    connect?: JobWhereUniqueInput
  }

  export type ApplicationCreateNestedManyWithoutJobInfoInput = {
    create?: XOR<ApplicationCreateWithoutJobInfoInput, ApplicationUncheckedCreateWithoutJobInfoInput> | ApplicationCreateWithoutJobInfoInput[] | ApplicationUncheckedCreateWithoutJobInfoInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutJobInfoInput | ApplicationCreateOrConnectWithoutJobInfoInput[]
    createMany?: ApplicationCreateManyJobInfoInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type ApplicationUncheckedCreateNestedManyWithoutJobInfoInput = {
    create?: XOR<ApplicationCreateWithoutJobInfoInput, ApplicationUncheckedCreateWithoutJobInfoInput> | ApplicationCreateWithoutJobInfoInput[] | ApplicationUncheckedCreateWithoutJobInfoInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutJobInfoInput | ApplicationCreateOrConnectWithoutJobInfoInput[]
    createMany?: ApplicationCreateManyJobInfoInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type JobUpdateOneRequiredWithoutJobInfoNestedInput = {
    create?: XOR<JobCreateWithoutJobInfoInput, JobUncheckedCreateWithoutJobInfoInput>
    connectOrCreate?: JobCreateOrConnectWithoutJobInfoInput
    upsert?: JobUpsertWithoutJobInfoInput
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutJobInfoInput, JobUpdateWithoutJobInfoInput>, JobUncheckedUpdateWithoutJobInfoInput>
  }

  export type ApplicationUpdateManyWithoutJobInfoNestedInput = {
    create?: XOR<ApplicationCreateWithoutJobInfoInput, ApplicationUncheckedCreateWithoutJobInfoInput> | ApplicationCreateWithoutJobInfoInput[] | ApplicationUncheckedCreateWithoutJobInfoInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutJobInfoInput | ApplicationCreateOrConnectWithoutJobInfoInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutJobInfoInput | ApplicationUpsertWithWhereUniqueWithoutJobInfoInput[]
    createMany?: ApplicationCreateManyJobInfoInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutJobInfoInput | ApplicationUpdateWithWhereUniqueWithoutJobInfoInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutJobInfoInput | ApplicationUpdateManyWithWhereWithoutJobInfoInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type ApplicationUncheckedUpdateManyWithoutJobInfoNestedInput = {
    create?: XOR<ApplicationCreateWithoutJobInfoInput, ApplicationUncheckedCreateWithoutJobInfoInput> | ApplicationCreateWithoutJobInfoInput[] | ApplicationUncheckedCreateWithoutJobInfoInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutJobInfoInput | ApplicationCreateOrConnectWithoutJobInfoInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutJobInfoInput | ApplicationUpsertWithWhereUniqueWithoutJobInfoInput[]
    createMany?: ApplicationCreateManyJobInfoInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutJobInfoInput | ApplicationUpdateWithWhereUniqueWithoutJobInfoInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutJobInfoInput | ApplicationUpdateManyWithWhereWithoutJobInfoInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumROLEFilter<$PrismaModel = never> = {
    equals?: $Enums.ROLE | EnumROLEFieldRefInput<$PrismaModel>
    in?: $Enums.ROLE[] | ListEnumROLEFieldRefInput<$PrismaModel>
    notIn?: $Enums.ROLE[] | ListEnumROLEFieldRefInput<$PrismaModel>
    not?: NestedEnumROLEFilter<$PrismaModel> | $Enums.ROLE
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumROLEWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ROLE | EnumROLEFieldRefInput<$PrismaModel>
    in?: $Enums.ROLE[] | ListEnumROLEFieldRefInput<$PrismaModel>
    notIn?: $Enums.ROLE[] | ListEnumROLEFieldRefInput<$PrismaModel>
    not?: NestedEnumROLEWithAggregatesFilter<$PrismaModel> | $Enums.ROLE
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumROLEFilter<$PrismaModel>
    _max?: NestedEnumROLEFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumJobTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.JobType | EnumJobTypeFieldRefInput<$PrismaModel>
    in?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumJobTypeFilter<$PrismaModel> | $Enums.JobType
  }

  export type NestedEnumYesNoFilter<$PrismaModel = never> = {
    equals?: $Enums.YesNo | EnumYesNoFieldRefInput<$PrismaModel>
    in?: $Enums.YesNo[] | ListEnumYesNoFieldRefInput<$PrismaModel>
    notIn?: $Enums.YesNo[] | ListEnumYesNoFieldRefInput<$PrismaModel>
    not?: NestedEnumYesNoFilter<$PrismaModel> | $Enums.YesNo
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumJobTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobType | EnumJobTypeFieldRefInput<$PrismaModel>
    in?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumJobTypeWithAggregatesFilter<$PrismaModel> | $Enums.JobType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobTypeFilter<$PrismaModel>
    _max?: NestedEnumJobTypeFilter<$PrismaModel>
  }

  export type NestedEnumYesNoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.YesNo | EnumYesNoFieldRefInput<$PrismaModel>
    in?: $Enums.YesNo[] | ListEnumYesNoFieldRefInput<$PrismaModel>
    notIn?: $Enums.YesNo[] | ListEnumYesNoFieldRefInput<$PrismaModel>
    not?: NestedEnumYesNoWithAggregatesFilter<$PrismaModel> | $Enums.YesNo
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumYesNoFilter<$PrismaModel>
    _max?: NestedEnumYesNoFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type JobCreateWithoutPostedByInput = {
    title: string
    jobType: $Enums.JobType
    location: string
    companyName: string
    introduction?: string | null
    responsibilities: string
    qualifications: string
    offers?: string | null
    salary: string
    hiringMultipleCandidates: $Enums.YesNo
    personalWebsite?: NullableJsonNullValueInput | InputJsonValue
    jobNiche: string
    newsLettersSent?: boolean
    jobPostedOn?: Date | string
    JobInfo?: JobInfoCreateNestedManyWithoutJobInput
    JobSeekerInfo?: JobSeekerInfoCreateNestedManyWithoutForWhichJobInput
    EmployerInfo?: EmployerInfoCreateNestedManyWithoutJobPostedInput
  }

  export type JobUncheckedCreateWithoutPostedByInput = {
    id?: number
    title: string
    jobType: $Enums.JobType
    location: string
    companyName: string
    introduction?: string | null
    responsibilities: string
    qualifications: string
    offers?: string | null
    salary: string
    hiringMultipleCandidates: $Enums.YesNo
    personalWebsite?: NullableJsonNullValueInput | InputJsonValue
    jobNiche: string
    newsLettersSent?: boolean
    jobPostedOn?: Date | string
    JobInfo?: JobInfoUncheckedCreateNestedManyWithoutJobInput
    JobSeekerInfo?: JobSeekerInfoUncheckedCreateNestedManyWithoutForWhichJobInput
    EmployerInfo?: EmployerInfoUncheckedCreateNestedManyWithoutJobPostedInput
  }

  export type JobCreateOrConnectWithoutPostedByInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutPostedByInput, JobUncheckedCreateWithoutPostedByInput>
  }

  export type JobCreateManyPostedByInputEnvelope = {
    data: JobCreateManyPostedByInput | JobCreateManyPostedByInput[]
    skipDuplicates?: boolean
  }

  export type JobSeekerInfoCreateWithoutUserInput = {
    name: string
    email: string
    phone: string
    address: string
    coverletter: string
    role?: string
    resume?: NullableJsonNullValueInput | InputJsonValue
    forWhichJob: JobCreateNestedOneWithoutJobSeekerInfoInput
    applications?: ApplicationCreateNestedManyWithoutJobSeekerInfoInput
  }

  export type JobSeekerInfoUncheckedCreateWithoutUserInput = {
    id?: number
    forWhichJobId: number
    name: string
    email: string
    phone: string
    address: string
    coverletter: string
    role?: string
    resume?: NullableJsonNullValueInput | InputJsonValue
    applications?: ApplicationUncheckedCreateNestedManyWithoutJobSeekerInfoInput
  }

  export type JobSeekerInfoCreateOrConnectWithoutUserInput = {
    where: JobSeekerInfoWhereUniqueInput
    create: XOR<JobSeekerInfoCreateWithoutUserInput, JobSeekerInfoUncheckedCreateWithoutUserInput>
  }

  export type JobSeekerInfoCreateManyUserInputEnvelope = {
    data: JobSeekerInfoCreateManyUserInput | JobSeekerInfoCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type EmployerInfoCreateWithoutUserInput = {
    role?: string
    jobPosted?: JobCreateNestedOneWithoutEmployerInfoInput
    applications?: ApplicationCreateNestedManyWithoutEmployerInfoInput
  }

  export type EmployerInfoUncheckedCreateWithoutUserInput = {
    id?: number
    jobPostedId?: number | null
    role?: string
    applications?: ApplicationUncheckedCreateNestedManyWithoutEmployerInfoInput
  }

  export type EmployerInfoCreateOrConnectWithoutUserInput = {
    where: EmployerInfoWhereUniqueInput
    create: XOR<EmployerInfoCreateWithoutUserInput, EmployerInfoUncheckedCreateWithoutUserInput>
  }

  export type EmployerInfoCreateManyUserInputEnvelope = {
    data: EmployerInfoCreateManyUserInput | EmployerInfoCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type JobUpsertWithWhereUniqueWithoutPostedByInput = {
    where: JobWhereUniqueInput
    update: XOR<JobUpdateWithoutPostedByInput, JobUncheckedUpdateWithoutPostedByInput>
    create: XOR<JobCreateWithoutPostedByInput, JobUncheckedCreateWithoutPostedByInput>
  }

  export type JobUpdateWithWhereUniqueWithoutPostedByInput = {
    where: JobWhereUniqueInput
    data: XOR<JobUpdateWithoutPostedByInput, JobUncheckedUpdateWithoutPostedByInput>
  }

  export type JobUpdateManyWithWhereWithoutPostedByInput = {
    where: JobScalarWhereInput
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyWithoutPostedByInput>
  }

  export type JobScalarWhereInput = {
    AND?: JobScalarWhereInput | JobScalarWhereInput[]
    OR?: JobScalarWhereInput[]
    NOT?: JobScalarWhereInput | JobScalarWhereInput[]
    id?: IntFilter<"Job"> | number
    title?: StringFilter<"Job"> | string
    jobType?: EnumJobTypeFilter<"Job"> | $Enums.JobType
    location?: StringFilter<"Job"> | string
    companyName?: StringFilter<"Job"> | string
    introduction?: StringNullableFilter<"Job"> | string | null
    responsibilities?: StringFilter<"Job"> | string
    qualifications?: StringFilter<"Job"> | string
    offers?: StringNullableFilter<"Job"> | string | null
    salary?: StringFilter<"Job"> | string
    hiringMultipleCandidates?: EnumYesNoFilter<"Job"> | $Enums.YesNo
    personalWebsite?: JsonNullableFilter<"Job">
    jobNiche?: StringFilter<"Job"> | string
    newsLettersSent?: BoolFilter<"Job"> | boolean
    jobPostedOn?: DateTimeFilter<"Job"> | Date | string
    postedById?: IntFilter<"Job"> | number
  }

  export type JobSeekerInfoUpsertWithWhereUniqueWithoutUserInput = {
    where: JobSeekerInfoWhereUniqueInput
    update: XOR<JobSeekerInfoUpdateWithoutUserInput, JobSeekerInfoUncheckedUpdateWithoutUserInput>
    create: XOR<JobSeekerInfoCreateWithoutUserInput, JobSeekerInfoUncheckedCreateWithoutUserInput>
  }

  export type JobSeekerInfoUpdateWithWhereUniqueWithoutUserInput = {
    where: JobSeekerInfoWhereUniqueInput
    data: XOR<JobSeekerInfoUpdateWithoutUserInput, JobSeekerInfoUncheckedUpdateWithoutUserInput>
  }

  export type JobSeekerInfoUpdateManyWithWhereWithoutUserInput = {
    where: JobSeekerInfoScalarWhereInput
    data: XOR<JobSeekerInfoUpdateManyMutationInput, JobSeekerInfoUncheckedUpdateManyWithoutUserInput>
  }

  export type JobSeekerInfoScalarWhereInput = {
    AND?: JobSeekerInfoScalarWhereInput | JobSeekerInfoScalarWhereInput[]
    OR?: JobSeekerInfoScalarWhereInput[]
    NOT?: JobSeekerInfoScalarWhereInput | JobSeekerInfoScalarWhereInput[]
    id?: IntFilter<"JobSeekerInfo"> | number
    JobSeekeruserId?: IntFilter<"JobSeekerInfo"> | number
    forWhichJobId?: IntFilter<"JobSeekerInfo"> | number
    name?: StringFilter<"JobSeekerInfo"> | string
    email?: StringFilter<"JobSeekerInfo"> | string
    phone?: StringFilter<"JobSeekerInfo"> | string
    address?: StringFilter<"JobSeekerInfo"> | string
    coverletter?: StringFilter<"JobSeekerInfo"> | string
    role?: StringFilter<"JobSeekerInfo"> | string
    resume?: JsonNullableFilter<"JobSeekerInfo">
  }

  export type EmployerInfoUpsertWithWhereUniqueWithoutUserInput = {
    where: EmployerInfoWhereUniqueInput
    update: XOR<EmployerInfoUpdateWithoutUserInput, EmployerInfoUncheckedUpdateWithoutUserInput>
    create: XOR<EmployerInfoCreateWithoutUserInput, EmployerInfoUncheckedCreateWithoutUserInput>
  }

  export type EmployerInfoUpdateWithWhereUniqueWithoutUserInput = {
    where: EmployerInfoWhereUniqueInput
    data: XOR<EmployerInfoUpdateWithoutUserInput, EmployerInfoUncheckedUpdateWithoutUserInput>
  }

  export type EmployerInfoUpdateManyWithWhereWithoutUserInput = {
    where: EmployerInfoScalarWhereInput
    data: XOR<EmployerInfoUpdateManyMutationInput, EmployerInfoUncheckedUpdateManyWithoutUserInput>
  }

  export type EmployerInfoScalarWhereInput = {
    AND?: EmployerInfoScalarWhereInput | EmployerInfoScalarWhereInput[]
    OR?: EmployerInfoScalarWhereInput[]
    NOT?: EmployerInfoScalarWhereInput | EmployerInfoScalarWhereInput[]
    id?: IntFilter<"EmployerInfo"> | number
    EmployeruserId?: IntFilter<"EmployerInfo"> | number
    jobPostedId?: IntNullableFilter<"EmployerInfo"> | number | null
    role?: StringFilter<"EmployerInfo"> | string
  }

  export type UserCreateWithoutJobsInput = {
    name: string
    email: string
    phone: string
    address: string
    niches: JsonNullValueInput | InputJsonValue
    password: string
    resume?: NullableJsonNullValueInput | InputJsonValue
    coverletter?: string | null
    role: $Enums.ROLE
    createdAt?: Date | string | null
    JobSeekerInfo?: JobSeekerInfoCreateNestedManyWithoutUserInput
    EmployerInfo?: EmployerInfoCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutJobsInput = {
    id?: number
    name: string
    email: string
    phone: string
    address: string
    niches: JsonNullValueInput | InputJsonValue
    password: string
    resume?: NullableJsonNullValueInput | InputJsonValue
    coverletter?: string | null
    role: $Enums.ROLE
    createdAt?: Date | string | null
    JobSeekerInfo?: JobSeekerInfoUncheckedCreateNestedManyWithoutUserInput
    EmployerInfo?: EmployerInfoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutJobsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutJobsInput, UserUncheckedCreateWithoutJobsInput>
  }

  export type JobInfoCreateWithoutJobInput = {
    jobTitle: string
    applications?: ApplicationCreateNestedManyWithoutJobInfoInput
  }

  export type JobInfoUncheckedCreateWithoutJobInput = {
    id?: number
    jobTitle: string
    applications?: ApplicationUncheckedCreateNestedManyWithoutJobInfoInput
  }

  export type JobInfoCreateOrConnectWithoutJobInput = {
    where: JobInfoWhereUniqueInput
    create: XOR<JobInfoCreateWithoutJobInput, JobInfoUncheckedCreateWithoutJobInput>
  }

  export type JobInfoCreateManyJobInputEnvelope = {
    data: JobInfoCreateManyJobInput | JobInfoCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type JobSeekerInfoCreateWithoutForWhichJobInput = {
    name: string
    email: string
    phone: string
    address: string
    coverletter: string
    role?: string
    resume?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutJobSeekerInfoInput
    applications?: ApplicationCreateNestedManyWithoutJobSeekerInfoInput
  }

  export type JobSeekerInfoUncheckedCreateWithoutForWhichJobInput = {
    id?: number
    JobSeekeruserId: number
    name: string
    email: string
    phone: string
    address: string
    coverletter: string
    role?: string
    resume?: NullableJsonNullValueInput | InputJsonValue
    applications?: ApplicationUncheckedCreateNestedManyWithoutJobSeekerInfoInput
  }

  export type JobSeekerInfoCreateOrConnectWithoutForWhichJobInput = {
    where: JobSeekerInfoWhereUniqueInput
    create: XOR<JobSeekerInfoCreateWithoutForWhichJobInput, JobSeekerInfoUncheckedCreateWithoutForWhichJobInput>
  }

  export type JobSeekerInfoCreateManyForWhichJobInputEnvelope = {
    data: JobSeekerInfoCreateManyForWhichJobInput | JobSeekerInfoCreateManyForWhichJobInput[]
    skipDuplicates?: boolean
  }

  export type EmployerInfoCreateWithoutJobPostedInput = {
    role?: string
    user: UserCreateNestedOneWithoutEmployerInfoInput
    applications?: ApplicationCreateNestedManyWithoutEmployerInfoInput
  }

  export type EmployerInfoUncheckedCreateWithoutJobPostedInput = {
    id?: number
    EmployeruserId: number
    role?: string
    applications?: ApplicationUncheckedCreateNestedManyWithoutEmployerInfoInput
  }

  export type EmployerInfoCreateOrConnectWithoutJobPostedInput = {
    where: EmployerInfoWhereUniqueInput
    create: XOR<EmployerInfoCreateWithoutJobPostedInput, EmployerInfoUncheckedCreateWithoutJobPostedInput>
  }

  export type EmployerInfoCreateManyJobPostedInputEnvelope = {
    data: EmployerInfoCreateManyJobPostedInput | EmployerInfoCreateManyJobPostedInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutJobsInput = {
    update: XOR<UserUpdateWithoutJobsInput, UserUncheckedUpdateWithoutJobsInput>
    create: XOR<UserCreateWithoutJobsInput, UserUncheckedCreateWithoutJobsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutJobsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutJobsInput, UserUncheckedUpdateWithoutJobsInput>
  }

  export type UserUpdateWithoutJobsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    niches?: JsonNullValueInput | InputJsonValue
    password?: StringFieldUpdateOperationsInput | string
    resume?: NullableJsonNullValueInput | InputJsonValue
    coverletter?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumROLEFieldUpdateOperationsInput | $Enums.ROLE
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    JobSeekerInfo?: JobSeekerInfoUpdateManyWithoutUserNestedInput
    EmployerInfo?: EmployerInfoUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutJobsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    niches?: JsonNullValueInput | InputJsonValue
    password?: StringFieldUpdateOperationsInput | string
    resume?: NullableJsonNullValueInput | InputJsonValue
    coverletter?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumROLEFieldUpdateOperationsInput | $Enums.ROLE
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    JobSeekerInfo?: JobSeekerInfoUncheckedUpdateManyWithoutUserNestedInput
    EmployerInfo?: EmployerInfoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type JobInfoUpsertWithWhereUniqueWithoutJobInput = {
    where: JobInfoWhereUniqueInput
    update: XOR<JobInfoUpdateWithoutJobInput, JobInfoUncheckedUpdateWithoutJobInput>
    create: XOR<JobInfoCreateWithoutJobInput, JobInfoUncheckedCreateWithoutJobInput>
  }

  export type JobInfoUpdateWithWhereUniqueWithoutJobInput = {
    where: JobInfoWhereUniqueInput
    data: XOR<JobInfoUpdateWithoutJobInput, JobInfoUncheckedUpdateWithoutJobInput>
  }

  export type JobInfoUpdateManyWithWhereWithoutJobInput = {
    where: JobInfoScalarWhereInput
    data: XOR<JobInfoUpdateManyMutationInput, JobInfoUncheckedUpdateManyWithoutJobInput>
  }

  export type JobInfoScalarWhereInput = {
    AND?: JobInfoScalarWhereInput | JobInfoScalarWhereInput[]
    OR?: JobInfoScalarWhereInput[]
    NOT?: JobInfoScalarWhereInput | JobInfoScalarWhereInput[]
    id?: IntFilter<"JobInfo"> | number
    jobId?: IntFilter<"JobInfo"> | number
    jobTitle?: StringFilter<"JobInfo"> | string
  }

  export type JobSeekerInfoUpsertWithWhereUniqueWithoutForWhichJobInput = {
    where: JobSeekerInfoWhereUniqueInput
    update: XOR<JobSeekerInfoUpdateWithoutForWhichJobInput, JobSeekerInfoUncheckedUpdateWithoutForWhichJobInput>
    create: XOR<JobSeekerInfoCreateWithoutForWhichJobInput, JobSeekerInfoUncheckedCreateWithoutForWhichJobInput>
  }

  export type JobSeekerInfoUpdateWithWhereUniqueWithoutForWhichJobInput = {
    where: JobSeekerInfoWhereUniqueInput
    data: XOR<JobSeekerInfoUpdateWithoutForWhichJobInput, JobSeekerInfoUncheckedUpdateWithoutForWhichJobInput>
  }

  export type JobSeekerInfoUpdateManyWithWhereWithoutForWhichJobInput = {
    where: JobSeekerInfoScalarWhereInput
    data: XOR<JobSeekerInfoUpdateManyMutationInput, JobSeekerInfoUncheckedUpdateManyWithoutForWhichJobInput>
  }

  export type EmployerInfoUpsertWithWhereUniqueWithoutJobPostedInput = {
    where: EmployerInfoWhereUniqueInput
    update: XOR<EmployerInfoUpdateWithoutJobPostedInput, EmployerInfoUncheckedUpdateWithoutJobPostedInput>
    create: XOR<EmployerInfoCreateWithoutJobPostedInput, EmployerInfoUncheckedCreateWithoutJobPostedInput>
  }

  export type EmployerInfoUpdateWithWhereUniqueWithoutJobPostedInput = {
    where: EmployerInfoWhereUniqueInput
    data: XOR<EmployerInfoUpdateWithoutJobPostedInput, EmployerInfoUncheckedUpdateWithoutJobPostedInput>
  }

  export type EmployerInfoUpdateManyWithWhereWithoutJobPostedInput = {
    where: EmployerInfoScalarWhereInput
    data: XOR<EmployerInfoUpdateManyMutationInput, EmployerInfoUncheckedUpdateManyWithoutJobPostedInput>
  }

  export type JobSeekerInfoCreateWithoutApplicationsInput = {
    name: string
    email: string
    phone: string
    address: string
    coverletter: string
    role?: string
    resume?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutJobSeekerInfoInput
    forWhichJob: JobCreateNestedOneWithoutJobSeekerInfoInput
  }

  export type JobSeekerInfoUncheckedCreateWithoutApplicationsInput = {
    id?: number
    JobSeekeruserId: number
    forWhichJobId: number
    name: string
    email: string
    phone: string
    address: string
    coverletter: string
    role?: string
    resume?: NullableJsonNullValueInput | InputJsonValue
  }

  export type JobSeekerInfoCreateOrConnectWithoutApplicationsInput = {
    where: JobSeekerInfoWhereUniqueInput
    create: XOR<JobSeekerInfoCreateWithoutApplicationsInput, JobSeekerInfoUncheckedCreateWithoutApplicationsInput>
  }

  export type EmployerInfoCreateWithoutApplicationsInput = {
    role?: string
    user: UserCreateNestedOneWithoutEmployerInfoInput
    jobPosted?: JobCreateNestedOneWithoutEmployerInfoInput
  }

  export type EmployerInfoUncheckedCreateWithoutApplicationsInput = {
    id?: number
    EmployeruserId: number
    jobPostedId?: number | null
    role?: string
  }

  export type EmployerInfoCreateOrConnectWithoutApplicationsInput = {
    where: EmployerInfoWhereUniqueInput
    create: XOR<EmployerInfoCreateWithoutApplicationsInput, EmployerInfoUncheckedCreateWithoutApplicationsInput>
  }

  export type JobInfoCreateWithoutApplicationsInput = {
    jobTitle: string
    job: JobCreateNestedOneWithoutJobInfoInput
  }

  export type JobInfoUncheckedCreateWithoutApplicationsInput = {
    id?: number
    jobId: number
    jobTitle: string
  }

  export type JobInfoCreateOrConnectWithoutApplicationsInput = {
    where: JobInfoWhereUniqueInput
    create: XOR<JobInfoCreateWithoutApplicationsInput, JobInfoUncheckedCreateWithoutApplicationsInput>
  }

  export type JobSeekerInfoUpsertWithoutApplicationsInput = {
    update: XOR<JobSeekerInfoUpdateWithoutApplicationsInput, JobSeekerInfoUncheckedUpdateWithoutApplicationsInput>
    create: XOR<JobSeekerInfoCreateWithoutApplicationsInput, JobSeekerInfoUncheckedCreateWithoutApplicationsInput>
    where?: JobSeekerInfoWhereInput
  }

  export type JobSeekerInfoUpdateToOneWithWhereWithoutApplicationsInput = {
    where?: JobSeekerInfoWhereInput
    data: XOR<JobSeekerInfoUpdateWithoutApplicationsInput, JobSeekerInfoUncheckedUpdateWithoutApplicationsInput>
  }

  export type JobSeekerInfoUpdateWithoutApplicationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    coverletter?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    resume?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutJobSeekerInfoNestedInput
    forWhichJob?: JobUpdateOneRequiredWithoutJobSeekerInfoNestedInput
  }

  export type JobSeekerInfoUncheckedUpdateWithoutApplicationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    JobSeekeruserId?: IntFieldUpdateOperationsInput | number
    forWhichJobId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    coverletter?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    resume?: NullableJsonNullValueInput | InputJsonValue
  }

  export type EmployerInfoUpsertWithoutApplicationsInput = {
    update: XOR<EmployerInfoUpdateWithoutApplicationsInput, EmployerInfoUncheckedUpdateWithoutApplicationsInput>
    create: XOR<EmployerInfoCreateWithoutApplicationsInput, EmployerInfoUncheckedCreateWithoutApplicationsInput>
    where?: EmployerInfoWhereInput
  }

  export type EmployerInfoUpdateToOneWithWhereWithoutApplicationsInput = {
    where?: EmployerInfoWhereInput
    data: XOR<EmployerInfoUpdateWithoutApplicationsInput, EmployerInfoUncheckedUpdateWithoutApplicationsInput>
  }

  export type EmployerInfoUpdateWithoutApplicationsInput = {
    role?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutEmployerInfoNestedInput
    jobPosted?: JobUpdateOneWithoutEmployerInfoNestedInput
  }

  export type EmployerInfoUncheckedUpdateWithoutApplicationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    EmployeruserId?: IntFieldUpdateOperationsInput | number
    jobPostedId?: NullableIntFieldUpdateOperationsInput | number | null
    role?: StringFieldUpdateOperationsInput | string
  }

  export type JobInfoUpsertWithoutApplicationsInput = {
    update: XOR<JobInfoUpdateWithoutApplicationsInput, JobInfoUncheckedUpdateWithoutApplicationsInput>
    create: XOR<JobInfoCreateWithoutApplicationsInput, JobInfoUncheckedCreateWithoutApplicationsInput>
    where?: JobInfoWhereInput
  }

  export type JobInfoUpdateToOneWithWhereWithoutApplicationsInput = {
    where?: JobInfoWhereInput
    data: XOR<JobInfoUpdateWithoutApplicationsInput, JobInfoUncheckedUpdateWithoutApplicationsInput>
  }

  export type JobInfoUpdateWithoutApplicationsInput = {
    jobTitle?: StringFieldUpdateOperationsInput | string
    job?: JobUpdateOneRequiredWithoutJobInfoNestedInput
  }

  export type JobInfoUncheckedUpdateWithoutApplicationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    jobTitle?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutJobSeekerInfoInput = {
    name: string
    email: string
    phone: string
    address: string
    niches: JsonNullValueInput | InputJsonValue
    password: string
    resume?: NullableJsonNullValueInput | InputJsonValue
    coverletter?: string | null
    role: $Enums.ROLE
    createdAt?: Date | string | null
    jobs?: JobCreateNestedManyWithoutPostedByInput
    EmployerInfo?: EmployerInfoCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutJobSeekerInfoInput = {
    id?: number
    name: string
    email: string
    phone: string
    address: string
    niches: JsonNullValueInput | InputJsonValue
    password: string
    resume?: NullableJsonNullValueInput | InputJsonValue
    coverletter?: string | null
    role: $Enums.ROLE
    createdAt?: Date | string | null
    jobs?: JobUncheckedCreateNestedManyWithoutPostedByInput
    EmployerInfo?: EmployerInfoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutJobSeekerInfoInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutJobSeekerInfoInput, UserUncheckedCreateWithoutJobSeekerInfoInput>
  }

  export type JobCreateWithoutJobSeekerInfoInput = {
    title: string
    jobType: $Enums.JobType
    location: string
    companyName: string
    introduction?: string | null
    responsibilities: string
    qualifications: string
    offers?: string | null
    salary: string
    hiringMultipleCandidates: $Enums.YesNo
    personalWebsite?: NullableJsonNullValueInput | InputJsonValue
    jobNiche: string
    newsLettersSent?: boolean
    jobPostedOn?: Date | string
    postedBy: UserCreateNestedOneWithoutJobsInput
    JobInfo?: JobInfoCreateNestedManyWithoutJobInput
    EmployerInfo?: EmployerInfoCreateNestedManyWithoutJobPostedInput
  }

  export type JobUncheckedCreateWithoutJobSeekerInfoInput = {
    id?: number
    title: string
    jobType: $Enums.JobType
    location: string
    companyName: string
    introduction?: string | null
    responsibilities: string
    qualifications: string
    offers?: string | null
    salary: string
    hiringMultipleCandidates: $Enums.YesNo
    personalWebsite?: NullableJsonNullValueInput | InputJsonValue
    jobNiche: string
    newsLettersSent?: boolean
    jobPostedOn?: Date | string
    postedById: number
    JobInfo?: JobInfoUncheckedCreateNestedManyWithoutJobInput
    EmployerInfo?: EmployerInfoUncheckedCreateNestedManyWithoutJobPostedInput
  }

  export type JobCreateOrConnectWithoutJobSeekerInfoInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutJobSeekerInfoInput, JobUncheckedCreateWithoutJobSeekerInfoInput>
  }

  export type ApplicationCreateWithoutJobSeekerInfoInput = {
    deletedBy?: NullableJsonNullValueInput | InputJsonValue
    employerInfo: EmployerInfoCreateNestedOneWithoutApplicationsInput
    jobInfo: JobInfoCreateNestedOneWithoutApplicationsInput
  }

  export type ApplicationUncheckedCreateWithoutJobSeekerInfoInput = {
    id?: number
    employerInfoId: number
    jobInfoId: number
    deletedBy?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ApplicationCreateOrConnectWithoutJobSeekerInfoInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutJobSeekerInfoInput, ApplicationUncheckedCreateWithoutJobSeekerInfoInput>
  }

  export type ApplicationCreateManyJobSeekerInfoInputEnvelope = {
    data: ApplicationCreateManyJobSeekerInfoInput | ApplicationCreateManyJobSeekerInfoInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutJobSeekerInfoInput = {
    update: XOR<UserUpdateWithoutJobSeekerInfoInput, UserUncheckedUpdateWithoutJobSeekerInfoInput>
    create: XOR<UserCreateWithoutJobSeekerInfoInput, UserUncheckedCreateWithoutJobSeekerInfoInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutJobSeekerInfoInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutJobSeekerInfoInput, UserUncheckedUpdateWithoutJobSeekerInfoInput>
  }

  export type UserUpdateWithoutJobSeekerInfoInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    niches?: JsonNullValueInput | InputJsonValue
    password?: StringFieldUpdateOperationsInput | string
    resume?: NullableJsonNullValueInput | InputJsonValue
    coverletter?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumROLEFieldUpdateOperationsInput | $Enums.ROLE
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jobs?: JobUpdateManyWithoutPostedByNestedInput
    EmployerInfo?: EmployerInfoUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutJobSeekerInfoInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    niches?: JsonNullValueInput | InputJsonValue
    password?: StringFieldUpdateOperationsInput | string
    resume?: NullableJsonNullValueInput | InputJsonValue
    coverletter?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumROLEFieldUpdateOperationsInput | $Enums.ROLE
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jobs?: JobUncheckedUpdateManyWithoutPostedByNestedInput
    EmployerInfo?: EmployerInfoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type JobUpsertWithoutJobSeekerInfoInput = {
    update: XOR<JobUpdateWithoutJobSeekerInfoInput, JobUncheckedUpdateWithoutJobSeekerInfoInput>
    create: XOR<JobCreateWithoutJobSeekerInfoInput, JobUncheckedCreateWithoutJobSeekerInfoInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutJobSeekerInfoInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutJobSeekerInfoInput, JobUncheckedUpdateWithoutJobSeekerInfoInput>
  }

  export type JobUpdateWithoutJobSeekerInfoInput = {
    title?: StringFieldUpdateOperationsInput | string
    jobType?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    location?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    responsibilities?: StringFieldUpdateOperationsInput | string
    qualifications?: StringFieldUpdateOperationsInput | string
    offers?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: StringFieldUpdateOperationsInput | string
    hiringMultipleCandidates?: EnumYesNoFieldUpdateOperationsInput | $Enums.YesNo
    personalWebsite?: NullableJsonNullValueInput | InputJsonValue
    jobNiche?: StringFieldUpdateOperationsInput | string
    newsLettersSent?: BoolFieldUpdateOperationsInput | boolean
    jobPostedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    postedBy?: UserUpdateOneRequiredWithoutJobsNestedInput
    JobInfo?: JobInfoUpdateManyWithoutJobNestedInput
    EmployerInfo?: EmployerInfoUpdateManyWithoutJobPostedNestedInput
  }

  export type JobUncheckedUpdateWithoutJobSeekerInfoInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    jobType?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    location?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    responsibilities?: StringFieldUpdateOperationsInput | string
    qualifications?: StringFieldUpdateOperationsInput | string
    offers?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: StringFieldUpdateOperationsInput | string
    hiringMultipleCandidates?: EnumYesNoFieldUpdateOperationsInput | $Enums.YesNo
    personalWebsite?: NullableJsonNullValueInput | InputJsonValue
    jobNiche?: StringFieldUpdateOperationsInput | string
    newsLettersSent?: BoolFieldUpdateOperationsInput | boolean
    jobPostedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    postedById?: IntFieldUpdateOperationsInput | number
    JobInfo?: JobInfoUncheckedUpdateManyWithoutJobNestedInput
    EmployerInfo?: EmployerInfoUncheckedUpdateManyWithoutJobPostedNestedInput
  }

  export type ApplicationUpsertWithWhereUniqueWithoutJobSeekerInfoInput = {
    where: ApplicationWhereUniqueInput
    update: XOR<ApplicationUpdateWithoutJobSeekerInfoInput, ApplicationUncheckedUpdateWithoutJobSeekerInfoInput>
    create: XOR<ApplicationCreateWithoutJobSeekerInfoInput, ApplicationUncheckedCreateWithoutJobSeekerInfoInput>
  }

  export type ApplicationUpdateWithWhereUniqueWithoutJobSeekerInfoInput = {
    where: ApplicationWhereUniqueInput
    data: XOR<ApplicationUpdateWithoutJobSeekerInfoInput, ApplicationUncheckedUpdateWithoutJobSeekerInfoInput>
  }

  export type ApplicationUpdateManyWithWhereWithoutJobSeekerInfoInput = {
    where: ApplicationScalarWhereInput
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyWithoutJobSeekerInfoInput>
  }

  export type ApplicationScalarWhereInput = {
    AND?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
    OR?: ApplicationScalarWhereInput[]
    NOT?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
    id?: IntFilter<"Application"> | number
    jobSeekerInfoId?: IntFilter<"Application"> | number
    employerInfoId?: IntFilter<"Application"> | number
    jobInfoId?: IntFilter<"Application"> | number
    deletedBy?: JsonNullableFilter<"Application">
  }

  export type UserCreateWithoutEmployerInfoInput = {
    name: string
    email: string
    phone: string
    address: string
    niches: JsonNullValueInput | InputJsonValue
    password: string
    resume?: NullableJsonNullValueInput | InputJsonValue
    coverletter?: string | null
    role: $Enums.ROLE
    createdAt?: Date | string | null
    jobs?: JobCreateNestedManyWithoutPostedByInput
    JobSeekerInfo?: JobSeekerInfoCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEmployerInfoInput = {
    id?: number
    name: string
    email: string
    phone: string
    address: string
    niches: JsonNullValueInput | InputJsonValue
    password: string
    resume?: NullableJsonNullValueInput | InputJsonValue
    coverletter?: string | null
    role: $Enums.ROLE
    createdAt?: Date | string | null
    jobs?: JobUncheckedCreateNestedManyWithoutPostedByInput
    JobSeekerInfo?: JobSeekerInfoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEmployerInfoInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEmployerInfoInput, UserUncheckedCreateWithoutEmployerInfoInput>
  }

  export type JobCreateWithoutEmployerInfoInput = {
    title: string
    jobType: $Enums.JobType
    location: string
    companyName: string
    introduction?: string | null
    responsibilities: string
    qualifications: string
    offers?: string | null
    salary: string
    hiringMultipleCandidates: $Enums.YesNo
    personalWebsite?: NullableJsonNullValueInput | InputJsonValue
    jobNiche: string
    newsLettersSent?: boolean
    jobPostedOn?: Date | string
    postedBy: UserCreateNestedOneWithoutJobsInput
    JobInfo?: JobInfoCreateNestedManyWithoutJobInput
    JobSeekerInfo?: JobSeekerInfoCreateNestedManyWithoutForWhichJobInput
  }

  export type JobUncheckedCreateWithoutEmployerInfoInput = {
    id?: number
    title: string
    jobType: $Enums.JobType
    location: string
    companyName: string
    introduction?: string | null
    responsibilities: string
    qualifications: string
    offers?: string | null
    salary: string
    hiringMultipleCandidates: $Enums.YesNo
    personalWebsite?: NullableJsonNullValueInput | InputJsonValue
    jobNiche: string
    newsLettersSent?: boolean
    jobPostedOn?: Date | string
    postedById: number
    JobInfo?: JobInfoUncheckedCreateNestedManyWithoutJobInput
    JobSeekerInfo?: JobSeekerInfoUncheckedCreateNestedManyWithoutForWhichJobInput
  }

  export type JobCreateOrConnectWithoutEmployerInfoInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutEmployerInfoInput, JobUncheckedCreateWithoutEmployerInfoInput>
  }

  export type ApplicationCreateWithoutEmployerInfoInput = {
    deletedBy?: NullableJsonNullValueInput | InputJsonValue
    jobSeekerInfo: JobSeekerInfoCreateNestedOneWithoutApplicationsInput
    jobInfo: JobInfoCreateNestedOneWithoutApplicationsInput
  }

  export type ApplicationUncheckedCreateWithoutEmployerInfoInput = {
    id?: number
    jobSeekerInfoId: number
    jobInfoId: number
    deletedBy?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ApplicationCreateOrConnectWithoutEmployerInfoInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutEmployerInfoInput, ApplicationUncheckedCreateWithoutEmployerInfoInput>
  }

  export type ApplicationCreateManyEmployerInfoInputEnvelope = {
    data: ApplicationCreateManyEmployerInfoInput | ApplicationCreateManyEmployerInfoInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutEmployerInfoInput = {
    update: XOR<UserUpdateWithoutEmployerInfoInput, UserUncheckedUpdateWithoutEmployerInfoInput>
    create: XOR<UserCreateWithoutEmployerInfoInput, UserUncheckedCreateWithoutEmployerInfoInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEmployerInfoInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEmployerInfoInput, UserUncheckedUpdateWithoutEmployerInfoInput>
  }

  export type UserUpdateWithoutEmployerInfoInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    niches?: JsonNullValueInput | InputJsonValue
    password?: StringFieldUpdateOperationsInput | string
    resume?: NullableJsonNullValueInput | InputJsonValue
    coverletter?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumROLEFieldUpdateOperationsInput | $Enums.ROLE
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jobs?: JobUpdateManyWithoutPostedByNestedInput
    JobSeekerInfo?: JobSeekerInfoUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEmployerInfoInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    niches?: JsonNullValueInput | InputJsonValue
    password?: StringFieldUpdateOperationsInput | string
    resume?: NullableJsonNullValueInput | InputJsonValue
    coverletter?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumROLEFieldUpdateOperationsInput | $Enums.ROLE
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jobs?: JobUncheckedUpdateManyWithoutPostedByNestedInput
    JobSeekerInfo?: JobSeekerInfoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type JobUpsertWithoutEmployerInfoInput = {
    update: XOR<JobUpdateWithoutEmployerInfoInput, JobUncheckedUpdateWithoutEmployerInfoInput>
    create: XOR<JobCreateWithoutEmployerInfoInput, JobUncheckedCreateWithoutEmployerInfoInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutEmployerInfoInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutEmployerInfoInput, JobUncheckedUpdateWithoutEmployerInfoInput>
  }

  export type JobUpdateWithoutEmployerInfoInput = {
    title?: StringFieldUpdateOperationsInput | string
    jobType?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    location?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    responsibilities?: StringFieldUpdateOperationsInput | string
    qualifications?: StringFieldUpdateOperationsInput | string
    offers?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: StringFieldUpdateOperationsInput | string
    hiringMultipleCandidates?: EnumYesNoFieldUpdateOperationsInput | $Enums.YesNo
    personalWebsite?: NullableJsonNullValueInput | InputJsonValue
    jobNiche?: StringFieldUpdateOperationsInput | string
    newsLettersSent?: BoolFieldUpdateOperationsInput | boolean
    jobPostedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    postedBy?: UserUpdateOneRequiredWithoutJobsNestedInput
    JobInfo?: JobInfoUpdateManyWithoutJobNestedInput
    JobSeekerInfo?: JobSeekerInfoUpdateManyWithoutForWhichJobNestedInput
  }

  export type JobUncheckedUpdateWithoutEmployerInfoInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    jobType?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    location?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    responsibilities?: StringFieldUpdateOperationsInput | string
    qualifications?: StringFieldUpdateOperationsInput | string
    offers?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: StringFieldUpdateOperationsInput | string
    hiringMultipleCandidates?: EnumYesNoFieldUpdateOperationsInput | $Enums.YesNo
    personalWebsite?: NullableJsonNullValueInput | InputJsonValue
    jobNiche?: StringFieldUpdateOperationsInput | string
    newsLettersSent?: BoolFieldUpdateOperationsInput | boolean
    jobPostedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    postedById?: IntFieldUpdateOperationsInput | number
    JobInfo?: JobInfoUncheckedUpdateManyWithoutJobNestedInput
    JobSeekerInfo?: JobSeekerInfoUncheckedUpdateManyWithoutForWhichJobNestedInput
  }

  export type ApplicationUpsertWithWhereUniqueWithoutEmployerInfoInput = {
    where: ApplicationWhereUniqueInput
    update: XOR<ApplicationUpdateWithoutEmployerInfoInput, ApplicationUncheckedUpdateWithoutEmployerInfoInput>
    create: XOR<ApplicationCreateWithoutEmployerInfoInput, ApplicationUncheckedCreateWithoutEmployerInfoInput>
  }

  export type ApplicationUpdateWithWhereUniqueWithoutEmployerInfoInput = {
    where: ApplicationWhereUniqueInput
    data: XOR<ApplicationUpdateWithoutEmployerInfoInput, ApplicationUncheckedUpdateWithoutEmployerInfoInput>
  }

  export type ApplicationUpdateManyWithWhereWithoutEmployerInfoInput = {
    where: ApplicationScalarWhereInput
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyWithoutEmployerInfoInput>
  }

  export type JobCreateWithoutJobInfoInput = {
    title: string
    jobType: $Enums.JobType
    location: string
    companyName: string
    introduction?: string | null
    responsibilities: string
    qualifications: string
    offers?: string | null
    salary: string
    hiringMultipleCandidates: $Enums.YesNo
    personalWebsite?: NullableJsonNullValueInput | InputJsonValue
    jobNiche: string
    newsLettersSent?: boolean
    jobPostedOn?: Date | string
    postedBy: UserCreateNestedOneWithoutJobsInput
    JobSeekerInfo?: JobSeekerInfoCreateNestedManyWithoutForWhichJobInput
    EmployerInfo?: EmployerInfoCreateNestedManyWithoutJobPostedInput
  }

  export type JobUncheckedCreateWithoutJobInfoInput = {
    id?: number
    title: string
    jobType: $Enums.JobType
    location: string
    companyName: string
    introduction?: string | null
    responsibilities: string
    qualifications: string
    offers?: string | null
    salary: string
    hiringMultipleCandidates: $Enums.YesNo
    personalWebsite?: NullableJsonNullValueInput | InputJsonValue
    jobNiche: string
    newsLettersSent?: boolean
    jobPostedOn?: Date | string
    postedById: number
    JobSeekerInfo?: JobSeekerInfoUncheckedCreateNestedManyWithoutForWhichJobInput
    EmployerInfo?: EmployerInfoUncheckedCreateNestedManyWithoutJobPostedInput
  }

  export type JobCreateOrConnectWithoutJobInfoInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutJobInfoInput, JobUncheckedCreateWithoutJobInfoInput>
  }

  export type ApplicationCreateWithoutJobInfoInput = {
    deletedBy?: NullableJsonNullValueInput | InputJsonValue
    jobSeekerInfo: JobSeekerInfoCreateNestedOneWithoutApplicationsInput
    employerInfo: EmployerInfoCreateNestedOneWithoutApplicationsInput
  }

  export type ApplicationUncheckedCreateWithoutJobInfoInput = {
    id?: number
    jobSeekerInfoId: number
    employerInfoId: number
    deletedBy?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ApplicationCreateOrConnectWithoutJobInfoInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutJobInfoInput, ApplicationUncheckedCreateWithoutJobInfoInput>
  }

  export type ApplicationCreateManyJobInfoInputEnvelope = {
    data: ApplicationCreateManyJobInfoInput | ApplicationCreateManyJobInfoInput[]
    skipDuplicates?: boolean
  }

  export type JobUpsertWithoutJobInfoInput = {
    update: XOR<JobUpdateWithoutJobInfoInput, JobUncheckedUpdateWithoutJobInfoInput>
    create: XOR<JobCreateWithoutJobInfoInput, JobUncheckedCreateWithoutJobInfoInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutJobInfoInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutJobInfoInput, JobUncheckedUpdateWithoutJobInfoInput>
  }

  export type JobUpdateWithoutJobInfoInput = {
    title?: StringFieldUpdateOperationsInput | string
    jobType?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    location?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    responsibilities?: StringFieldUpdateOperationsInput | string
    qualifications?: StringFieldUpdateOperationsInput | string
    offers?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: StringFieldUpdateOperationsInput | string
    hiringMultipleCandidates?: EnumYesNoFieldUpdateOperationsInput | $Enums.YesNo
    personalWebsite?: NullableJsonNullValueInput | InputJsonValue
    jobNiche?: StringFieldUpdateOperationsInput | string
    newsLettersSent?: BoolFieldUpdateOperationsInput | boolean
    jobPostedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    postedBy?: UserUpdateOneRequiredWithoutJobsNestedInput
    JobSeekerInfo?: JobSeekerInfoUpdateManyWithoutForWhichJobNestedInput
    EmployerInfo?: EmployerInfoUpdateManyWithoutJobPostedNestedInput
  }

  export type JobUncheckedUpdateWithoutJobInfoInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    jobType?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    location?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    responsibilities?: StringFieldUpdateOperationsInput | string
    qualifications?: StringFieldUpdateOperationsInput | string
    offers?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: StringFieldUpdateOperationsInput | string
    hiringMultipleCandidates?: EnumYesNoFieldUpdateOperationsInput | $Enums.YesNo
    personalWebsite?: NullableJsonNullValueInput | InputJsonValue
    jobNiche?: StringFieldUpdateOperationsInput | string
    newsLettersSent?: BoolFieldUpdateOperationsInput | boolean
    jobPostedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    postedById?: IntFieldUpdateOperationsInput | number
    JobSeekerInfo?: JobSeekerInfoUncheckedUpdateManyWithoutForWhichJobNestedInput
    EmployerInfo?: EmployerInfoUncheckedUpdateManyWithoutJobPostedNestedInput
  }

  export type ApplicationUpsertWithWhereUniqueWithoutJobInfoInput = {
    where: ApplicationWhereUniqueInput
    update: XOR<ApplicationUpdateWithoutJobInfoInput, ApplicationUncheckedUpdateWithoutJobInfoInput>
    create: XOR<ApplicationCreateWithoutJobInfoInput, ApplicationUncheckedCreateWithoutJobInfoInput>
  }

  export type ApplicationUpdateWithWhereUniqueWithoutJobInfoInput = {
    where: ApplicationWhereUniqueInput
    data: XOR<ApplicationUpdateWithoutJobInfoInput, ApplicationUncheckedUpdateWithoutJobInfoInput>
  }

  export type ApplicationUpdateManyWithWhereWithoutJobInfoInput = {
    where: ApplicationScalarWhereInput
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyWithoutJobInfoInput>
  }

  export type JobCreateManyPostedByInput = {
    id?: number
    title: string
    jobType: $Enums.JobType
    location: string
    companyName: string
    introduction?: string | null
    responsibilities: string
    qualifications: string
    offers?: string | null
    salary: string
    hiringMultipleCandidates: $Enums.YesNo
    personalWebsite?: NullableJsonNullValueInput | InputJsonValue
    jobNiche: string
    newsLettersSent?: boolean
    jobPostedOn?: Date | string
  }

  export type JobSeekerInfoCreateManyUserInput = {
    id?: number
    forWhichJobId: number
    name: string
    email: string
    phone: string
    address: string
    coverletter: string
    role?: string
    resume?: NullableJsonNullValueInput | InputJsonValue
  }

  export type EmployerInfoCreateManyUserInput = {
    id?: number
    jobPostedId?: number | null
    role?: string
  }

  export type JobUpdateWithoutPostedByInput = {
    title?: StringFieldUpdateOperationsInput | string
    jobType?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    location?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    responsibilities?: StringFieldUpdateOperationsInput | string
    qualifications?: StringFieldUpdateOperationsInput | string
    offers?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: StringFieldUpdateOperationsInput | string
    hiringMultipleCandidates?: EnumYesNoFieldUpdateOperationsInput | $Enums.YesNo
    personalWebsite?: NullableJsonNullValueInput | InputJsonValue
    jobNiche?: StringFieldUpdateOperationsInput | string
    newsLettersSent?: BoolFieldUpdateOperationsInput | boolean
    jobPostedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    JobInfo?: JobInfoUpdateManyWithoutJobNestedInput
    JobSeekerInfo?: JobSeekerInfoUpdateManyWithoutForWhichJobNestedInput
    EmployerInfo?: EmployerInfoUpdateManyWithoutJobPostedNestedInput
  }

  export type JobUncheckedUpdateWithoutPostedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    jobType?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    location?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    responsibilities?: StringFieldUpdateOperationsInput | string
    qualifications?: StringFieldUpdateOperationsInput | string
    offers?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: StringFieldUpdateOperationsInput | string
    hiringMultipleCandidates?: EnumYesNoFieldUpdateOperationsInput | $Enums.YesNo
    personalWebsite?: NullableJsonNullValueInput | InputJsonValue
    jobNiche?: StringFieldUpdateOperationsInput | string
    newsLettersSent?: BoolFieldUpdateOperationsInput | boolean
    jobPostedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    JobInfo?: JobInfoUncheckedUpdateManyWithoutJobNestedInput
    JobSeekerInfo?: JobSeekerInfoUncheckedUpdateManyWithoutForWhichJobNestedInput
    EmployerInfo?: EmployerInfoUncheckedUpdateManyWithoutJobPostedNestedInput
  }

  export type JobUncheckedUpdateManyWithoutPostedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    jobType?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    location?: StringFieldUpdateOperationsInput | string
    companyName?: StringFieldUpdateOperationsInput | string
    introduction?: NullableStringFieldUpdateOperationsInput | string | null
    responsibilities?: StringFieldUpdateOperationsInput | string
    qualifications?: StringFieldUpdateOperationsInput | string
    offers?: NullableStringFieldUpdateOperationsInput | string | null
    salary?: StringFieldUpdateOperationsInput | string
    hiringMultipleCandidates?: EnumYesNoFieldUpdateOperationsInput | $Enums.YesNo
    personalWebsite?: NullableJsonNullValueInput | InputJsonValue
    jobNiche?: StringFieldUpdateOperationsInput | string
    newsLettersSent?: BoolFieldUpdateOperationsInput | boolean
    jobPostedOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobSeekerInfoUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    coverletter?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    resume?: NullableJsonNullValueInput | InputJsonValue
    forWhichJob?: JobUpdateOneRequiredWithoutJobSeekerInfoNestedInput
    applications?: ApplicationUpdateManyWithoutJobSeekerInfoNestedInput
  }

  export type JobSeekerInfoUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    forWhichJobId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    coverletter?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    resume?: NullableJsonNullValueInput | InputJsonValue
    applications?: ApplicationUncheckedUpdateManyWithoutJobSeekerInfoNestedInput
  }

  export type JobSeekerInfoUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    forWhichJobId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    coverletter?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    resume?: NullableJsonNullValueInput | InputJsonValue
  }

  export type EmployerInfoUpdateWithoutUserInput = {
    role?: StringFieldUpdateOperationsInput | string
    jobPosted?: JobUpdateOneWithoutEmployerInfoNestedInput
    applications?: ApplicationUpdateManyWithoutEmployerInfoNestedInput
  }

  export type EmployerInfoUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobPostedId?: NullableIntFieldUpdateOperationsInput | number | null
    role?: StringFieldUpdateOperationsInput | string
    applications?: ApplicationUncheckedUpdateManyWithoutEmployerInfoNestedInput
  }

  export type EmployerInfoUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobPostedId?: NullableIntFieldUpdateOperationsInput | number | null
    role?: StringFieldUpdateOperationsInput | string
  }

  export type JobInfoCreateManyJobInput = {
    id?: number
    jobTitle: string
  }

  export type JobSeekerInfoCreateManyForWhichJobInput = {
    id?: number
    JobSeekeruserId: number
    name: string
    email: string
    phone: string
    address: string
    coverletter: string
    role?: string
    resume?: NullableJsonNullValueInput | InputJsonValue
  }

  export type EmployerInfoCreateManyJobPostedInput = {
    id?: number
    EmployeruserId: number
    role?: string
  }

  export type JobInfoUpdateWithoutJobInput = {
    jobTitle?: StringFieldUpdateOperationsInput | string
    applications?: ApplicationUpdateManyWithoutJobInfoNestedInput
  }

  export type JobInfoUncheckedUpdateWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobTitle?: StringFieldUpdateOperationsInput | string
    applications?: ApplicationUncheckedUpdateManyWithoutJobInfoNestedInput
  }

  export type JobInfoUncheckedUpdateManyWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobTitle?: StringFieldUpdateOperationsInput | string
  }

  export type JobSeekerInfoUpdateWithoutForWhichJobInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    coverletter?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    resume?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutJobSeekerInfoNestedInput
    applications?: ApplicationUpdateManyWithoutJobSeekerInfoNestedInput
  }

  export type JobSeekerInfoUncheckedUpdateWithoutForWhichJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    JobSeekeruserId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    coverletter?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    resume?: NullableJsonNullValueInput | InputJsonValue
    applications?: ApplicationUncheckedUpdateManyWithoutJobSeekerInfoNestedInput
  }

  export type JobSeekerInfoUncheckedUpdateManyWithoutForWhichJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    JobSeekeruserId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    coverletter?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    resume?: NullableJsonNullValueInput | InputJsonValue
  }

  export type EmployerInfoUpdateWithoutJobPostedInput = {
    role?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutEmployerInfoNestedInput
    applications?: ApplicationUpdateManyWithoutEmployerInfoNestedInput
  }

  export type EmployerInfoUncheckedUpdateWithoutJobPostedInput = {
    id?: IntFieldUpdateOperationsInput | number
    EmployeruserId?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    applications?: ApplicationUncheckedUpdateManyWithoutEmployerInfoNestedInput
  }

  export type EmployerInfoUncheckedUpdateManyWithoutJobPostedInput = {
    id?: IntFieldUpdateOperationsInput | number
    EmployeruserId?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
  }

  export type ApplicationCreateManyJobSeekerInfoInput = {
    id?: number
    employerInfoId: number
    jobInfoId: number
    deletedBy?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ApplicationUpdateWithoutJobSeekerInfoInput = {
    deletedBy?: NullableJsonNullValueInput | InputJsonValue
    employerInfo?: EmployerInfoUpdateOneRequiredWithoutApplicationsNestedInput
    jobInfo?: JobInfoUpdateOneRequiredWithoutApplicationsNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutJobSeekerInfoInput = {
    id?: IntFieldUpdateOperationsInput | number
    employerInfoId?: IntFieldUpdateOperationsInput | number
    jobInfoId?: IntFieldUpdateOperationsInput | number
    deletedBy?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ApplicationUncheckedUpdateManyWithoutJobSeekerInfoInput = {
    id?: IntFieldUpdateOperationsInput | number
    employerInfoId?: IntFieldUpdateOperationsInput | number
    jobInfoId?: IntFieldUpdateOperationsInput | number
    deletedBy?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ApplicationCreateManyEmployerInfoInput = {
    id?: number
    jobSeekerInfoId: number
    jobInfoId: number
    deletedBy?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ApplicationUpdateWithoutEmployerInfoInput = {
    deletedBy?: NullableJsonNullValueInput | InputJsonValue
    jobSeekerInfo?: JobSeekerInfoUpdateOneRequiredWithoutApplicationsNestedInput
    jobInfo?: JobInfoUpdateOneRequiredWithoutApplicationsNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutEmployerInfoInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobSeekerInfoId?: IntFieldUpdateOperationsInput | number
    jobInfoId?: IntFieldUpdateOperationsInput | number
    deletedBy?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ApplicationUncheckedUpdateManyWithoutEmployerInfoInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobSeekerInfoId?: IntFieldUpdateOperationsInput | number
    jobInfoId?: IntFieldUpdateOperationsInput | number
    deletedBy?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ApplicationCreateManyJobInfoInput = {
    id?: number
    jobSeekerInfoId: number
    employerInfoId: number
    deletedBy?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ApplicationUpdateWithoutJobInfoInput = {
    deletedBy?: NullableJsonNullValueInput | InputJsonValue
    jobSeekerInfo?: JobSeekerInfoUpdateOneRequiredWithoutApplicationsNestedInput
    employerInfo?: EmployerInfoUpdateOneRequiredWithoutApplicationsNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutJobInfoInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobSeekerInfoId?: IntFieldUpdateOperationsInput | number
    employerInfoId?: IntFieldUpdateOperationsInput | number
    deletedBy?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ApplicationUncheckedUpdateManyWithoutJobInfoInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobSeekerInfoId?: IntFieldUpdateOperationsInput | number
    employerInfoId?: IntFieldUpdateOperationsInput | number
    deletedBy?: NullableJsonNullValueInput | InputJsonValue
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JobCountOutputTypeDefaultArgs instead
     */
    export type JobCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JobCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JobSeekerInfoCountOutputTypeDefaultArgs instead
     */
    export type JobSeekerInfoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JobSeekerInfoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmployerInfoCountOutputTypeDefaultArgs instead
     */
    export type EmployerInfoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmployerInfoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JobInfoCountOutputTypeDefaultArgs instead
     */
    export type JobInfoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JobInfoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JobDefaultArgs instead
     */
    export type JobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JobDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ApplicationDefaultArgs instead
     */
    export type ApplicationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ApplicationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JobSeekerInfoDefaultArgs instead
     */
    export type JobSeekerInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JobSeekerInfoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmployerInfoDefaultArgs instead
     */
    export type EmployerInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmployerInfoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JobInfoDefaultArgs instead
     */
    export type JobInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JobInfoDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}